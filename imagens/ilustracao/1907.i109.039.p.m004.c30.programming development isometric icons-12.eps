%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1907.i109.039.P.m004.c30.programming development isometric icons-12.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 7/27/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 12 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1907.i109.039.P.m004.c30.programming development isometric icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-07-27T02:10:08+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-07-27T02:10:08+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-07-27T02:10:08+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXjH54+dte8q+Z9&#xA;DuNMnKI1vIZoK/A9JB1GZGHEJg24mpzGBFMs/Kz8y0862U/O3MF3ZhRP/KeXQj55XkxmBot2LKJi&#xA;wzvK212KuxV2KuxVp+XBuNOVDSvSuKsF0T82NJv7CSWSOlzDF67IjKqNEAGZyZCvpfB8XxniegY5&#xA;MRvk45zSjtIb+XL9nx+bD/Pn5jXUmqWM2jgrLbpPJGyExvInGKVFPNVNeBfZSyk/FRgMT6WMSMvv&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f755d84e-1f74-d649-a1f9-601115d63755</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f755d84e-1f74-d649-a1f9-601115d63755</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:56951091-f210-4d6c-acf8-7d6166a3fc77</stRef:instanceID>
            <stRef:documentID>xmp.did:8faff406-9835-a44f-a861-00435c2b7605</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:10B133E4D7AEE9118D4F824495A8166B</stEvt:instanceID>
                  <stEvt:when>2019-07-25T17:29:48+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:87827DC782B2E911A3A28DD2F6CBDBCD</stEvt:instanceID>
                  <stEvt:when>2019-07-30T10:04:36+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8faff406-9835-a44f-a861-00435c2b7605</stEvt:instanceID>
                  <stEvt:when>2021-07-25T01:39:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f755d84e-1f74-d649-a1f9-601115d63755</stEvt:instanceID>
                  <stEvt:when>2021-07-27T02:10:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
382.344 112.035 mo
379.455 113.707 li
263.34 46.6655 li
266.243 45 li
382.344 112.035 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.52549 .764706 .760784 rgb
f
382.344 122.34 mo
379.455 124.011 li
379.455 113.707 li
382.344 112.035 li
382.344 122.34 li
cp
.223529 .364706 .376471 rgb
f
382.344 212.188 mo
379.455 213.864 li
379.455 124.011 li
382.344 122.34 li
382.344 212.188 li
cp
.784314 .784314 .784314 rgb
f
379.455 113.707 mo
263.34 46.6655 li
263.34 56.9695 li
379.455 124.011 li
379.455 113.707 li
cp
.207843 .564706 .560784 rgb
f
263.34 146.822 mo
379.455 213.864 li
379.455 124.011 li
263.34 56.9695 li
263.34 146.822 li
cp
.945098 .945098 .945098 rgb
f
269.441 67.2711 mo
269.441 144.261 li
373.36 204.3 li
373.36 127.303 li
269.441 67.2711 li
cp
.129412 .101961 .101961 rgb
f
293.546 91.3898 mo
274.627 80.463 li
274.627 77.741 li
293.546 88.6676 li
293.546 91.3898 li
cp
.945098 .945098 .945098 rgb
f
287.354 94.3429 mo
274.627 86.995 li
274.627 84.2723 li
287.354 91.6208 li
287.354 94.3429 li
cp
.52549 .764706 .760784 rgb
f
280.99 97.2015 mo
274.627 93.5265 li
274.627 90.8038 li
280.99 94.4795 li
280.99 97.2015 li
cp
.67451 .65098 .623529 rgb
f
316.677 117.8 mo
282.674 98.1754 li
282.674 95.4529 li
316.677 115.08 li
316.677 117.8 li
cp
.52549 .764706 .760784 rgb
f
301.63 122.497 mo
277.34 108.47 li
277.34 105.747 li
301.63 119.773 li
301.63 122.497 li
cp
.945098 .945098 .945098 rgb
f
295.525 125.501 mo
284.991 119.417 li
284.991 116.695 li
295.525 122.779 li
295.525 125.501 li
cp
f
300.154 141.548 mo
280.99 130.487 li
280.99 127.765 li
300.154 138.825 li
300.154 141.548 li
cp
f
306.793 151.914 mo
280.99 137.019 li
280.99 134.296 li
306.793 149.192 li
306.793 151.914 li
cp
f
286.5 146.734 mo
280.99 143.55 li
280.99 140.828 li
286.5 144.01 li
286.5 146.734 li
cp
.52549 .764706 .760784 rgb
f
319.82 165.967 mo
290.256 148.903 li
290.256 146.181 li
319.82 163.247 li
319.82 165.967 li
cp
.945098 .945098 .945098 rgb
f
321.158 160.21 mo
308.648 152.987 li
308.648 150.264 li
321.158 157.488 li
321.158 160.21 li
cp
.52549 .764706 .760784 rgb
f
329.786 165.189 mo
324.42 162.095 li
324.42 159.373 li
329.786 162.469 li
329.786 165.189 li
cp
.67451 .65098 .623529 rgb
f
328.246 170.832 mo
322.884 167.739 li
322.884 165.014 li
328.246 168.11 li
328.246 170.832 li
cp
f
338.48 170.21 mo
333.123 167.116 li
333.118 164.393 li
338.48 167.489 li
338.48 170.21 li
cp
f
368.173 184.631 mo
341.387 169.16 li
341.387 171.882 li
368.173 187.354 li
368.173 184.631 li
cp
.52549 .764706 .760784 rgb
f
351.788 181.701 mo
331.268 169.854 li
331.268 172.577 li
351.788 184.429 li
351.788 181.701 li
cp
.964706 .6 .231373 rgb
f
311.643 148.183 mo
302.179 142.717 li
302.179 139.999 li
311.643 145.461 li
311.643 148.183 li
cp
.67451 .65098 .623529 rgb
f
330.682 159.177 mo
315.085 150.17 li
315.085 147.447 li
330.682 156.454 li
330.682 159.177 li
cp
.52549 .764706 .760784 rgb
f
368.173 167.448 mo
298.792 127.391 li
298.792 124.664 li
368.173 164.726 li
368.173 167.448 li
cp
.964706 .6 .231373 rgb
f
281.899 117.636 mo
277.34 114.995 li
277.34 112.279 li
281.899 114.912 li
281.899 117.636 li
cp
.67451 .65098 .623529 rgb
f
275.975 100.912 mo
274.775 100.224 li
274.775 97.5016 li
275.975 98.1962 li
275.975 100.912 li
cp
f
279.172 122.906 mo
277.977 122.216 li
277.977 119.494 li
279.172 120.183 li
279.172 122.906 li
cp
f
306.793 125.478 mo
302.724 123.125 li
302.728 120.405 li
306.793 122.753 li
306.793 125.478 li
cp
f
290.542 96.1819 mo
289.037 95.3191 li
289.037 92.5942 li
290.542 93.4594 li
290.542 96.1819 li
cp
f
295.525 99.059 mo
292.443 97.28 li
292.443 94.5555 li
295.525 96.3387 li
295.525 99.059 li
cp
f
300.154 95.1991 mo
294.335 91.8401 li
294.335 89.1222 li
300.154 92.4766 li
300.154 95.1991 li
cp
f
364.574 219.17 mo
361.681 220.842 li
258.712 161.385 li
261.61 159.719 li
364.574 219.17 li
cp
.52549 .764706 .760784 rgb
f
364.574 229.474 mo
361.681 231.146 li
361.681 220.842 li
364.574 219.17 li
364.574 229.474 li
cp
.223529 .364706 .376471 rgb
f
364.574 298.545 mo
361.681 300.218 li
361.681 231.146 li
364.574 229.474 li
364.574 298.545 li
cp
.784314 .784314 .784314 rgb
f
361.681 220.842 mo
258.712 161.385 li
258.712 171.693 li
361.681 231.146 li
361.681 220.842 li
cp
.207843 .564706 .560784 rgb
f
258.712 240.767 mo
361.681 300.218 li
361.681 231.146 li
258.712 171.693 li
258.712 240.767 li
cp
.945098 .945098 .945098 rgb
f
264.808 181.992 mo
264.808 238.206 li
355.595 290.657 li
355.595 234.443 li
264.808 181.992 li
cp
.129412 .101961 .101961 rgb
f
275.038 194.446 mo
270.252 191.682 li
270.252 188.958 li
275.038 191.721 li
275.038 194.446 li
cp
.67451 .65098 .623529 rgb
f
292.254 204.388 mo
278.383 196.375 li
278.383 193.652 li
292.254 201.663 li
292.254 204.388 li
cp
.945098 .945098 .945098 rgb
f
287.192 214.528 mo
273.312 206.515 li
273.312 203.792 li
287.192 211.803 li
287.192 214.528 li
cp
f
278.383 215.972 mo
273.312 213.047 li
273.312 210.324 li
278.383 213.252 li
278.383 215.972 li
cp
.52549 .764706 .760784 rgb
f
296 226.147 mo
283.048 218.667 li
283.048 215.944 li
296 223.424 li
296 226.147 li
cp
f
307.864 232.99 mo
303.019 230.198 li
303.019 227.475 li
307.864 230.272 li
307.864 232.99 li
cp
f
300.32 228.641 mo
297.902 227.243 li
297.902 224.522 li
300.32 225.914 li
300.32 228.641 li
cp
.67451 .65098 .623529 rgb
f
282.001 218.06 mo
279.587 216.666 li
279.583 213.942 li
282.001 215.34 li
282.001 218.06 li
cp
f
278.383 222.504 mo
273.312 219.578 li
273.312 216.856 li
278.383 219.784 li
278.383 222.504 li
cp
.52549 .764706 .760784 rgb
f
276.542 227.974 mo
273.312 226.11 li
273.312 223.392 li
276.542 225.251 li
276.542 227.974 li
cp
f
301.192 242.207 mo
281.65 230.922 li
281.65 228.2 li
301.192 239.484 li
301.192 242.207 li
cp
.945098 .945098 .945098 rgb
f
289.526 242.315 mo
273.275 232.932 li
273.275 230.214 li
289.522 239.593 li
289.526 242.315 li
cp
f
301.861 249.442 mo
291.612 243.522 li
291.608 240.795 li
301.861 246.715 li
301.861 249.442 li
cp
.52549 .764706 .760784 rgb
f
345.905 274.872 mo
333.367 267.625 li
333.367 264.905 li
345.905 272.142 li
345.905 274.872 li
cp
f
308.667 253.366 mo
304.468 250.942 li
304.468 248.226 li
308.667 250.644 li
308.667 253.366 li
cp
.67451 .65098 .623529 rgb
f
330.086 265.731 mo
313.881 256.377 li
313.881 253.655 li
330.086 263.008 li
330.086 265.731 li
cp
.964706 .6 .231373 rgb
f
322.56 254.545 mo
303.019 243.263 li
303.019 240.541 li
322.56 251.825 li
322.56 254.545 li
cp
.52549 .764706 .760784 rgb
f
296 232.678 mo
283.048 225.198 li
283.048 222.476 li
296 229.96 li
296 232.678 li
cp
f
307.864 239.526 mo
303.019 236.729 li
303.019 234.009 li
307.864 236.804 li
307.864 239.526 li
cp
f
300.32 235.174 mo
297.902 233.776 li
297.902 231.054 li
300.32 232.452 li
300.32 235.174 li
cp
.67451 .65098 .623529 rgb
f
282.001 224.594 mo
279.587 223.196 li
279.583 220.478 li
282.001 221.872 li
282.001 224.594 li
cp
f
280.252 230.117 mo
277.829 228.719 li
277.829 225.996 li
280.252 227.393 li
280.252 230.117 li
cp
f
303.194 223.766 mo
289.314 215.753 li
289.314 213.031 li
303.194 221.043 li
303.194 223.766 li
cp
.52549 .764706 .760784 rgb
f
315.976 231.146 mo
307.19 226.068 li
307.19 223.346 li
315.976 228.424 li
315.976 231.146 li
cp
f
331.36 240.029 mo
318.126 232.383 li
318.126 229.665 li
331.36 237.306 li
331.36 240.029 li
cp
f
343.62 247.109 mo
335.767 242.573 li
335.767 239.851 li
343.62 244.387 li
343.62 247.109 li
cp
f
310.12 214.703 mo
296.254 206.69 li
296.254 203.968 li
310.12 211.978 li
310.12 214.703 li
cp
f
271.448 198.897 mo
270.252 198.202 li
270.252 195.487 li
271.448 196.172 li
271.448 198.897 li
cp
.67451 .65098 .623529 rgb
f
271.448 238.501 mo
270.252 237.812 li
270.252 235.091 li
271.448 235.784 li
271.448 238.501 li
cp
f
173.523 172.401 mo
170.634 174.072 li
67.6563 114.614 li
70.5542 112.948 li
173.523 172.401 li
cp
.52549 .764706 .760784 rgb
f
173.523 182.705 mo
170.634 184.378 li
170.634 174.072 li
173.523 172.401 li
173.523 182.705 li
cp
.223529 .364706 .376471 rgb
f
173.523 251.777 mo
170.634 253.45 li
170.634 184.378 li
173.523 182.705 li
173.523 251.777 li
cp
.784314 .784314 .784314 rgb
f
170.634 174.072 mo
67.6563 114.614 li
67.6563 124.925 li
170.634 184.378 li
170.634 174.072 li
cp
.207843 .564706 .560784 rgb
f
67.6563 193.996 mo
170.634 253.45 li
170.634 184.378 li
67.6563 124.925 li
67.6563 193.996 li
cp
.945098 .945098 .945098 rgb
f
73.761 135.224 mo
73.761 191.431 li
164.539 243.884 li
164.539 187.67 li
73.761 135.224 li
cp
.129412 .101961 .101961 rgb
f
83.9861 147.678 mo
79.2058 144.914 li
79.2058 142.189 li
83.9861 144.953 li
83.9861 147.678 li
cp
.67451 .65098 .623529 rgb
f
101.202 157.615 mo
87.3313 149.606 li
87.3313 146.884 li
101.202 154.895 li
101.202 157.615 li
cp
.945098 .945098 .945098 rgb
f
96.1309 167.753 mo
82.2651 159.746 li
82.2651 157.024 li
96.1309 165.032 li
96.1309 167.753 li
cp
f
87.3313 169.204 mo
82.2651 166.278 li
82.2651 163.556 li
87.3313 166.481 li
87.3313 169.204 li
cp
.52549 .764706 .760784 rgb
f
104.954 179.378 mo
91.9922 171.898 li
91.9922 169.176 li
104.954 176.656 li
104.954 179.378 li
cp
f
116.803 186.221 mo
111.963 183.43 li
111.963 180.707 li
116.803 183.504 li
116.803 186.221 li
cp
f
109.263 181.868 mo
106.845 180.474 li
106.845 177.754 li
109.263 179.145 li
109.263 181.868 li
cp
.67451 .65098 .623529 rgb
f
90.9446 171.292 mo
88.531 169.896 li
88.5269 167.173 li
90.9446 168.571 li
90.9446 171.292 li
cp
f
87.3313 175.735 mo
82.2651 172.81 li
82.2651 170.087 li
87.3313 173.013 li
87.3313 175.735 li
cp
.52549 .764706 .760784 rgb
f
85.4858 181.205 mo
82.2651 179.341 li
82.2651 176.619 li
85.4858 178.483 li
85.4858 181.205 li
cp
f
110.14 195.434 mo
90.594 184.154 li
90.594 181.432 li
110.14 192.716 li
110.14 195.434 li
cp
.945098 .945098 .945098 rgb
f
98.4707 195.547 mo
82.2236 186.164 li
82.2236 183.446 li
98.4707 192.824 li
98.4707 195.547 li
cp
f
110.814 202.669 mo
100.556 196.746 li
100.552 194.026 li
110.814 199.947 li
110.814 202.669 li
cp
.52549 .764706 .760784 rgb
f
154.853 228.096 mo
142.311 220.857 li
142.311 218.136 li
154.853 225.374 li
154.853 228.096 li
cp
f
117.611 206.598 mo
113.421 204.173 li
113.421 201.453 li
117.611 203.876 li
117.611 206.598 li
cp
.67451 .65098 .623529 rgb
f
139.03 218.962 mo
122.825 209.607 li
122.825 206.886 li
139.03 216.24 li
139.03 218.962 li
cp
.964706 .6 .231373 rgb
f
131.505 207.777 mo
111.963 196.495 li
111.963 193.772 li
131.505 205.057 li
131.505 207.777 li
cp
.52549 .764706 .760784 rgb
f
104.954 185.91 mo
91.9922 178.43 li
91.9922 175.708 li
104.954 183.187 li
104.954 185.91 li
cp
f
116.803 192.753 mo
111.963 189.961 li
111.963 187.239 li
116.803 190.03 li
116.803 192.753 li
cp
f
109.263 188.406 mo
106.845 187.008 li
106.845 184.286 li
109.263 185.681 li
109.263 188.406 li
cp
.67451 .65098 .623529 rgb
f
90.9446 177.825 mo
88.531 176.427 li
88.5269 173.705 li
90.9446 175.103 li
90.9446 177.825 li
cp
f
89.2002 183.347 mo
86.7781 181.951 li
86.7781 179.228 li
89.2002 180.624 li
89.2002 183.347 li
cp
f
112.138 176.997 mo
98.2629 168.984 li
98.2629 166.262 li
112.138 174.275 li
112.138 176.997 li
cp
.52549 .764706 .760784 rgb
f
124.92 184.378 mo
116.134 179.3 li
116.134 176.578 li
124.925 181.656 li
124.92 184.378 li
cp
f
140.309 193.258 mo
127.065 185.615 li
127.065 182.892 li
140.309 190.538 li
140.309 193.258 li
cp
f
152.569 200.339 mo
144.711 195.801 li
144.711 193.083 li
152.569 197.619 li
152.569 200.339 li
cp
f
119.073 167.935 mo
105.198 159.922 li
105.198 157.2 li
119.073 165.21 li
119.073 167.935 li
cp
f
80.3965 152.121 mo
79.2058 151.434 li
79.2058 148.711 li
80.3965 149.401 li
80.3965 152.121 li
cp
.67451 .65098 .623529 rgb
f
80.3965 191.733 mo
79.2058 191.043 li
79.2058 188.323 li
80.3965 189.011 li
80.3965 191.733 li
cp
f
301.339 150.64 mo
298.446 152.313 li
140.309 61.0071 li
143.206 59.3387 li
301.339 150.64 li
cp
.52549 .764706 .760784 rgb
f
301.339 160.947 mo
298.446 162.619 li
298.446 152.313 li
301.339 150.64 li
301.339 160.947 li
cp
.223529 .364706 .376471 rgb
f
301.339 375.185 mo
298.446 376.858 li
298.446 162.619 li
301.339 160.947 li
301.339 375.185 li
cp
.784314 .784314 .784314 rgb
f
298.446 152.313 mo
140.309 61.0071 li
140.309 71.3176 li
298.446 162.619 li
298.446 152.313 li
cp
.207843 .564706 .560784 rgb
f
140.309 285.554 mo
298.446 376.858 li
298.446 162.619 li
140.309 71.3176 li
140.309 285.554 li
cp
.945098 .945098 .945098 rgb
f
146.404 81.6169 mo
146.404 282.993 li
292.355 367.29 li
292.355 165.913 li
146.404 81.6169 li
cp
.129412 .101961 .101961 rgb
f
172.147 104.85 mo
153.22 93.921 li
153.22 91.2008 li
172.147 102.127 li
172.147 104.85 li
cp
.945098 .945098 .945098 rgb
f
165.95 107.808 mo
153.22 100.457 li
153.22 97.7346 li
165.95 105.085 li
165.95 107.808 li
cp
.52549 .764706 .760784 rgb
f
159.583 110.657 mo
153.22 106.989 li
153.22 104.266 li
159.583 107.935 li
159.583 110.657 li
cp
.67451 .65098 .623529 rgb
f
195.27 131.265 mo
161.272 111.633 li
161.272 108.908 li
195.27 128.54 li
195.27 131.265 li
cp
.52549 .764706 .760784 rgb
f
180.232 135.953 mo
155.933 121.93 li
155.933 119.205 li
180.232 133.235 li
180.232 135.953 li
cp
.945098 .945098 .945098 rgb
f
174.122 138.966 mo
163.583 132.877 li
163.583 130.155 li
174.122 136.243 li
174.122 138.966 li
cp
f
178.746 155.01 mo
159.583 143.949 li
159.583 141.227 li
178.746 152.287 li
178.746 155.01 li
cp
f
185.391 165.378 mo
159.583 150.483 li
159.583 147.758 li
185.391 162.656 li
185.391 165.378 li
cp
f
165.097 160.197 mo
159.583 157.012 li
159.583 154.29 li
165.097 157.474 li
165.097 160.197 li
cp
.52549 .764706 .760784 rgb
f
165.097 166.728 mo
159.583 163.544 li
159.583 160.822 li
165.097 164.005 li
165.097 166.728 li
cp
f
165.097 173.26 mo
159.583 170.076 li
159.583 167.353 li
165.097 170.537 li
165.097 173.26 li
cp
f
174.648 172.24 mo
169.139 169.056 li
169.139 166.334 li
174.648 169.517 li
174.648 172.24 li
cp
f
183.628 177.426 mo
175.991 173.015 li
175.991 170.295 li
183.628 174.704 li
183.628 177.426 li
cp
.67451 .65098 .623529 rgb
f
198.412 179.429 mo
168.853 162.365 li
168.853 159.641 li
198.412 176.707 li
198.412 179.429 li
cp
.945098 .945098 .945098 rgb
f
186.627 185.686 mo
167.302 174.533 li
167.302 171.811 li
186.627 182.964 li
186.627 185.686 li
cp
f
175.604 186.168 mo
159.583 176.919 li
159.583 174.197 li
175.604 183.446 li
175.604 186.168 li
cp
f
206.224 210.382 mo
159.583 183.45 li
159.583 180.728 li
206.224 207.659 li
206.224 210.382 li
cp
f
180.781 202.219 mo
159.583 189.982 li
159.583 187.262 li
180.781 199.496 li
180.781 202.219 li
cp
f
165.457 199.909 mo
159.583 196.516 li
159.583 193.793 li
165.457 197.183 li
165.457 199.909 li
cp
.67451 .65098 .623529 rgb
f
170.667 216.602 mo
162.517 211.898 li
162.517 209.173 li
170.667 213.88 li
170.667 216.602 li
cp
.52549 .764706 .760784 rgb
f
167.302 221.193 mo
162.517 218.429 li
162.517 215.707 li
167.302 218.471 li
167.302 221.193 li
cp
.67451 .65098 .623529 rgb
f
170.782 236.575 mo
165.997 233.811 li
165.997 231.089 li
170.782 233.852 li
170.782 236.575 li
cp
f
187.993 246.512 mo
174.122 238.506 li
174.122 235.784 li
187.993 243.796 li
187.993 246.512 li
cp
.945098 .945098 .945098 rgb
f
182.927 256.652 mo
169.056 248.646 li
169.056 245.924 li
182.927 253.93 li
182.927 256.652 li
cp
f
174.122 258.101 mo
169.056 255.178 li
169.056 252.455 li
174.122 255.378 li
174.122 258.101 li
cp
.52549 .764706 .760784 rgb
f
191.745 268.278 mo
178.792 260.798 li
178.792 258.075 li
191.745 265.555 li
191.745 268.278 li
cp
f
203.599 275.121 mo
198.758 272.331 li
198.758 269.609 li
203.599 272.403 li
203.599 275.121 li
cp
f
196.054 270.772 mo
193.641 269.376 li
193.641 266.651 li
196.054 268.045 li
196.054 270.772 li
cp
.67451 .65098 .623529 rgb
f
177.74 260.193 mo
175.322 258.795 li
175.317 256.073 li
177.74 257.471 li
177.74 260.193 li
cp
f
174.122 264.632 mo
169.056 261.709 li
169.056 258.987 li
174.122 261.917 li
174.122 264.632 li
cp
.52549 .764706 .760784 rgb
f
172.281 270.103 mo
169.056 268.241 li
169.056 265.518 li
172.281 267.382 li
172.281 270.103 li
cp
f
196.931 284.333 mo
177.385 273.056 li
177.385 270.333 li
196.931 281.615 li
196.931 284.333 li
cp
.945098 .945098 .945098 rgb
f
185.266 284.447 mo
169.019 275.063 li
169.019 272.345 li
185.266 281.724 li
185.266 284.447 li
cp
f
169.457 288.692 mo
165.997 286.698 li
165.997 283.975 li
169.457 285.967 li
169.457 288.692 li
cp
.52549 .764706 .760784 rgb
f
183.125 296.584 mo
174.459 291.578 li
174.459 288.862 li
183.125 293.862 li
183.125 296.584 li
cp
f
173.569 291.073 mo
170.445 289.266 li
170.445 286.548 li
173.569 288.35 li
173.569 291.073 li
cp
.67451 .65098 .623529 rgb
f
197.604 291.575 mo
187.352 285.649 li
187.352 282.926 li
197.604 288.846 li
197.604 291.575 li
cp
.52549 .764706 .760784 rgb
f
241.648 317.003 mo
229.107 309.756 li
229.107 307.033 li
241.648 314.275 li
241.648 317.003 li
cp
f
250.536 322.131 mo
245.335 319.13 li
245.335 316.407 li
250.536 319.409 li
250.536 322.131 li
cp
f
258.057 326.476 mo
252.857 323.468 li
252.857 320.745 li
258.057 323.753 li
258.057 326.476 li
cp
f
204.406 295.498 mo
200.212 293.075 li
200.212 290.353 li
204.406 292.773 li
204.406 295.498 li
cp
.67451 .65098 .623529 rgb
f
225.821 307.862 mo
209.616 298.504 li
209.616 295.788 li
225.821 305.14 li
225.821 307.862 li
cp
.964706 .6 .231373 rgb
f
218.305 296.676 mo
198.758 285.394 li
198.758 282.672 li
218.305 293.954 li
218.305 296.676 li
cp
.52549 .764706 .760784 rgb
f
191.745 274.809 mo
178.792 267.332 li
178.792 264.609 li
191.745 272.087 li
191.745 274.809 li
cp
f
203.599 281.652 mo
198.758 278.863 li
198.758 276.14 li
203.599 278.928 li
203.599 281.652 li
cp
f
196.054 277.303 mo
193.641 275.905 li
193.641 273.183 li
196.054 274.581 li
196.054 277.303 li
cp
.67451 .65098 .623529 rgb
f
177.74 266.725 mo
175.322 265.327 li
175.317 262.604 li
177.74 264.003 li
177.74 266.725 li
cp
f
175.991 272.248 mo
173.569 270.85 li
173.569 268.128 li
175.991 269.526 li
175.991 272.248 li
cp
f
198.929 265.897 mo
185.054 257.886 li
185.054 255.161 li
198.929 263.174 li
198.929 265.897 li
cp
.52549 .764706 .760784 rgb
f
211.716 273.277 mo
202.925 268.199 li
202.925 265.477 li
211.72 270.555 li
211.716 273.277 li
cp
f
227.104 282.16 mo
213.861 274.514 li
213.861 271.791 li
227.104 279.435 li
227.104 282.16 li
cp
f
239.364 289.241 mo
231.511 284.7 li
231.511 281.985 li
239.364 286.516 li
239.364 289.241 li
cp
f
205.865 256.834 mo
191.989 248.821 li
191.989 246.099 li
205.865 254.112 li
205.865 256.834 li
cp
f
181.321 229.289 mo
170.094 222.808 li
170.094 220.086 li
181.321 226.566 li
181.321 229.289 li
cp
f
194.638 230.443 mo
175.737 219.532 li
175.737 216.81 li
194.638 227.725 li
194.638 230.443 li
cp
.945098 .945098 .945098 rgb
f
224.418 247.635 mo
200.867 234.04 li
200.867 231.317 li
224.418 244.913 li
224.418 247.635 li
cp
.52549 .764706 .760784 rgb
f
253.424 264.379 mo
229.877 250.785 li
229.877 248.065 li
253.424 261.663 li
253.424 264.379 li
cp
f
177.385 206.801 mo
168.387 201.599 li
168.387 198.876 li
177.385 204.076 li
177.385 206.801 li
cp
f
196.931 211.547 mo
182.341 203.119 li
182.341 200.397 li
196.931 208.822 li
196.931 211.547 li
cp
f
204.157 215.723 mo
198.929 212.701 li
198.929 209.978 li
204.157 212.998 li
204.157 215.723 li
cp
.67451 .65098 .623529 rgb
f
212.897 214.233 mo
209.274 212.14 li
209.274 209.418 li
212.897 211.508 li
212.897 214.233 li
cp
.964706 .6 .231373 rgb
f
217.696 217.006 mo
214.087 214.915 li
214.087 212.197 li
217.696 214.283 li
217.696 217.006 li
cp
.67451 .65098 .623529 rgb
f
226.227 221.927 mo
222.614 219.841 li
222.614 217.119 li
226.227 219.207 li
226.227 221.927 li
cp
.964706 .6 .231373 rgb
f
238.645 229.098 mo
227.418 222.621 li
227.418 219.894 li
238.645 226.373 li
238.645 229.098 li
cp
.52549 .764706 .760784 rgb
f
186.913 192.702 mo
177.38 187.192 li
177.38 184.477 li
186.913 189.977 li
186.913 192.702 li
cp
f
195.625 197.732 mo
190.24 194.622 li
190.24 191.897 li
195.625 195.009 li
195.625 197.732 li
cp
.67451 .65098 .623529 rgb
f
210.848 206.515 mo
200.327 200.445 li
200.327 197.723 li
210.848 203.792 li
210.848 206.515 li
cp
.964706 .6 .231373 rgb
f
218.254 210.795 mo
213.529 208.061 li
213.529 205.341 li
218.254 208.072 li
218.254 210.795 li
cp
.52549 .764706 .760784 rgb
f
225.577 215.019 mo
220.843 212.292 li
220.843 209.568 li
225.577 212.294 li
225.577 215.019 li
cp
f
208.07 198.068 mo
188.75 186.916 li
188.75 184.196 li
208.075 195.348 li
208.07 198.068 li
cp
f
215.467 202.337 mo
210.317 199.367 li
210.317 196.642 li
215.467 199.614 li
215.467 202.337 li
cp
.67451 .65098 .623529 rgb
f
199.76 173.675 mo
187.241 166.449 li
187.241 163.726 li
199.76 170.952 li
199.76 173.675 li
cp
.52549 .764706 .760784 rgb
f
208.379 178.647 mo
203.022 175.557 li
203.022 172.838 li
208.379 175.925 li
208.379 178.647 li
cp
.67451 .65098 .623529 rgb
f
206.838 184.295 mo
201.48 181.199 li
201.48 178.478 li
206.838 181.572 li
206.838 184.295 li
cp
f
217.077 183.667 mo
211.72 180.573 li
211.716 177.858 li
217.077 180.952 li
217.077 183.667 li
cp
f
250.946 203.23 mo
219.98 185.347 li
219.98 182.622 li
250.942 200.507 li
250.946 203.23 li
cp
.52549 .764706 .760784 rgb
f
275.278 223.807 mo
209.86 186.039 li
209.86 183.316 li
275.278 221.085 li
275.278 223.807 li
cp
.964706 .6 .231373 rgb
f
190.24 161.645 mo
180.781 156.18 li
180.781 153.464 li
190.24 158.923 li
190.24 161.645 li
cp
.67451 .65098 .623529 rgb
f
209.274 172.639 mo
193.683 163.634 li
193.683 160.911 li
209.274 169.917 li
209.274 172.639 li
cp
.52549 .764706 .760784 rgb
f
246.77 180.906 mo
177.385 140.849 li
177.385 138.128 li
246.77 178.183 li
246.77 180.906 li
cp
.964706 .6 .231373 rgb
f
160.496 131.099 mo
155.933 128.459 li
155.933 125.741 li
160.496 128.369 li
160.496 131.099 li
cp
.67451 .65098 .623529 rgb
f
154.567 114.376 mo
153.376 113.686 li
153.376 110.964 li
154.567 111.654 li
154.567 114.376 li
cp
f
157.769 136.363 mo
156.57 135.674 li
156.57 132.951 li
157.769 133.643 li
157.769 136.363 li
cp
f
161.096 204.388 mo
159.897 203.7 li
159.897 200.978 li
161.096 201.663 li
161.096 204.388 li
cp
f
164.183 226.077 mo
162.983 225.385 li
162.983 222.668 li
164.183 223.355 li
164.183 226.077 li
cp
f
167.192 241.021 mo
165.997 240.333 li
165.997 237.611 li
167.192 238.299 li
167.192 241.021 li
cp
f
167.192 280.632 mo
165.997 279.945 li
165.997 277.22 li
167.192 277.908 li
167.192 280.632 li
cp
f
185.391 138.938 mo
181.321 136.59 li
181.321 133.867 li
185.391 136.216 li
185.391 138.938 li
cp
f
169.139 109.644 mo
167.63 108.774 li
167.63 106.052 li
169.139 106.922 li
169.139 109.644 li
cp
f
174.122 112.521 mo
171.035 110.74 li
171.035 108.02 li
174.122 109.799 li
174.122 112.521 li
cp
f
178.746 108.661 mo
172.932 105.3 li
172.932 102.584 li
178.746 105.939 li
178.746 108.661 li
cp
f
237.348 117.325 mo
243.872 113.557 li
241.067 111.949 li
234.538 115.71 li
237.348 117.325 li
cp
.866667 .847059 .831373 rgb
f
178.986 352.115 mo
181.782 353.737 li
190.438 332.205 li
239.424 119.081 li
237.348 117.325 li
234.538 115.71 li
178.986 352.115 li
cp
.603922 .576471 .552941 rgb
f
181.782 353.737 mo
188.311 349.972 li
243.872 113.557 li
237.348 117.325 li
181.782 353.737 li
cp
.811765 .784314 .74902 rgb
f
274.304 147.23 mo
238.621 126.632 li
237.976 127.012 li
273.644 147.888 li
274.304 147.23 li
cp
.866667 .847059 .831373 rgb
f
273.644 147.616 mo
237.976 127.012 li
237.495 127.832 li
273.164 149.192 li
273.644 147.616 li
cp
.67451 .65098 .623529 rgb
f
273.164 148.425 mo
237.495 127.832 li
237.495 128.598 li
273.164 149.192 li
273.164 148.425 li
cp
.603922 .576471 .552941 rgb
f
273.644 149.466 mo
273.164 149.192 li
273.164 148.425 li
273.644 147.616 li
274.304 147.23 li
274.779 147.5 li
274.779 148.275 li
274.304 149.078 li
273.644 149.466 li
cp
.811765 .784314 .74902 rgb
f
269.75 166.67 mo
234.076 146.07 li
233.412 146.455 li
269.09 167.332 li
269.75 166.67 li
cp
.866667 .847059 .831373 rgb
f
269.09 167.058 mo
233.412 146.455 li
232.946 147.272 li
268.615 168.638 li
269.09 167.058 li
cp
.67451 .65098 .623529 rgb
f
268.615 167.868 mo
232.946 147.272 li
232.946 148.029 li
268.615 168.638 li
268.615 167.868 li
cp
.603922 .576471 .552941 rgb
f
269.09 168.913 mo
268.615 168.638 li
268.615 167.868 li
269.09 167.058 li
269.75 166.67 li
270.225 166.945 li
270.225 167.7 li
269.75 168.523 li
269.09 168.913 li
cp
.811765 .784314 .74902 rgb
f
265.2 186.106 mo
229.517 165.512 li
228.866 165.9 li
264.549 186.775 li
265.2 186.106 li
cp
.866667 .847059 .831373 rgb
f
264.545 186.489 mo
228.866 165.9 li
228.387 166.721 li
264.065 188.074 li
264.545 186.489 li
cp
.67451 .65098 .623529 rgb
f
264.065 187.303 mo
228.387 166.721 li
228.387 167.48 li
264.065 188.074 li
264.065 187.303 li
cp
.603922 .576471 .552941 rgb
f
264.545 188.353 mo
264.065 188.074 li
264.065 187.303 li
264.545 186.489 li
265.2 186.106 li
265.671 186.39 li
265.671 187.153 li
265.2 187.963 li
264.545 188.353 li
cp
.811765 .784314 .74902 rgb
f
260.65 205.546 mo
224.977 184.952 li
224.313 185.34 li
260 206.213 li
260.65 205.546 li
cp
.866667 .847059 .831373 rgb
f
259.99 205.936 mo
224.313 185.34 li
223.842 186.157 li
259.524 207.514 li
259.99 205.936 li
cp
.67451 .65098 .623529 rgb
f
259.524 206.762 mo
223.842 186.157 li
223.842 186.918 li
259.524 207.514 li
259.524 206.762 li
cp
.603922 .576471 .552941 rgb
f
259.99 207.798 mo
259.524 207.514 li
259.524 206.762 li
259.99 205.929 li
260.65 205.546 li
261.125 205.82 li
261.125 206.598 li
260.65 207.41 li
259.99 207.798 li
cp
.811765 .784314 .74902 rgb
f
256.1 224.993 mo
220.418 204.404 li
219.763 204.791 li
255.45 225.655 li
256.1 224.993 li
cp
.866667 .847059 .831373 rgb
f
255.445 225.381 mo
219.763 204.791 li
219.292 205.592 li
254.974 226.954 li
255.445 225.381 li
cp
.67451 .65098 .623529 rgb
f
254.974 226.197 mo
219.292 205.592 li
219.292 206.365 li
254.974 226.954 li
254.974 226.197 li
cp
.603922 .576471 .552941 rgb
f
255.445 227.229 mo
254.974 226.954 li
254.974 226.197 li
255.445 225.381 li
256.1 224.993 li
256.571 225.261 li
256.571 226.034 li
256.1 226.841 li
255.445 227.229 li
cp
.811765 .784314 .74902 rgb
f
251.555 244.433 mo
215.882 223.842 li
215.213 224.22 li
250.896 245.1 li
251.555 244.433 li
cp
.866667 .847059 .831373 rgb
f
250.896 244.816 mo
215.213 224.22 li
214.742 225.039 li
250.425 246.399 li
250.896 244.816 li
cp
.67451 .65098 .623529 rgb
f
250.425 245.633 mo
214.742 225.039 li
214.742 225.803 li
250.425 246.399 li
250.425 245.633 li
cp
.603922 .576471 .552941 rgb
f
250.896 246.669 mo
250.425 246.399 li
250.425 245.633 li
250.896 244.816 li
251.555 244.433 li
252.021 244.713 li
252.021 245.478 li
251.555 246.286 li
250.896 246.669 li
cp
.811765 .784314 .74902 rgb
f
246.997 263.878 mo
211.328 243.277 li
210.673 243.656 li
246.341 264.531 li
246.997 263.878 li
cp
.866667 .847059 .831373 rgb
f
246.341 264.266 mo
210.673 243.656 li
210.193 244.48 li
245.871 265.846 li
246.341 264.266 li
cp
.67451 .65098 .623529 rgb
f
245.871 265.073 mo
210.193 244.48 li
210.193 245.245 li
245.871 265.846 li
245.871 265.073 li
cp
.603922 .576471 .552941 rgb
f
246.341 266.109 mo
245.871 265.846 li
245.871 265.073 li
246.341 264.256 li
246.997 263.878 li
247.481 264.148 li
247.481 264.925 li
246.997 265.731 li
246.341 266.109 li
cp
.811765 .784314 .74902 rgb
f
242.451 283.323 mo
206.764 262.724 li
206.109 263.107 li
241.796 283.985 li
242.451 283.323 li
cp
.866667 .847059 .831373 rgb
f
241.792 283.701 mo
206.109 263.107 li
205.643 263.919 li
241.326 285.279 li
241.792 283.701 li
cp
.67451 .65098 .623529 rgb
f
241.326 284.516 mo
205.643 263.919 li
205.643 264.685 li
241.326 285.279 li
241.326 284.516 li
cp
.603922 .576471 .552941 rgb
f
241.796 285.554 mo
241.326 285.279 li
241.326 284.516 li
241.792 283.701 li
242.447 283.323 li
242.931 283.577 li
242.931 284.35 li
242.447 285.171 li
241.796 285.554 li
cp
.811765 .784314 .74902 rgb
f
237.916 302.758 mo
202.233 282.164 li
201.559 282.555 li
237.246 303.416 li
237.916 302.758 li
cp
.866667 .847059 .831373 rgb
f
237.246 303.144 mo
201.559 282.555 li
201.088 283.355 li
236.771 304.727 li
237.246 303.144 li
cp
.67451 .65098 .623529 rgb
f
236.771 303.953 mo
201.088 283.355 li
201.088 284.126 li
236.771 304.727 li
236.771 303.953 li
cp
.603922 .576471 .552941 rgb
f
237.246 305.001 mo
236.771 304.727 li
236.771 303.953 li
237.246 303.144 li
237.916 302.758 li
238.372 303.026 li
238.372 303.806 li
237.916 304.613 li
237.246 305.001 li
cp
.811765 .784314 .74902 rgb
f
233.361 322.194 mo
197.683 301.609 li
197.014 301.988 li
232.701 322.851 li
233.361 322.194 li
cp
.866667 .847059 .831373 rgb
f
232.701 322.588 mo
197.014 301.988 li
196.553 302.807 li
232.226 324.166 li
232.701 322.588 li
cp
.67451 .65098 .623529 rgb
f
232.226 323.396 mo
196.553 302.807 li
196.553 303.566 li
232.226 324.166 li
232.226 323.396 li
cp
.603922 .576471 .552941 rgb
f
232.701 324.43 mo
232.226 324.166 li
232.226 323.396 li
232.701 322.572 li
233.361 322.194 li
233.832 322.48 li
233.832 323.239 li
233.361 324.042 li
232.701 324.43 li
cp
.811765 .784314 .74902 rgb
f
228.811 341.634 mo
193.133 321.049 li
192.46 321.428 li
228.147 342.296 li
228.811 341.634 li
cp
.866667 .847059 .831373 rgb
f
228.147 342.029 mo
192.46 321.428 li
191.994 322.235 li
227.663 343.597 li
228.147 342.029 li
cp
.67451 .65098 .623529 rgb
f
227.663 342.845 mo
191.994 322.235 li
191.994 323.008 li
227.663 343.597 li
227.663 342.845 li
cp
.603922 .576471 .552941 rgb
f
228.147 343.865 mo
227.663 343.597 li
227.663 342.845 li
228.147 342.029 li
228.811 341.634 li
229.273 341.913 li
229.273 342.679 li
228.811 343.493 li
228.147 343.865 li
cp
.811765 .784314 .74902 rgb
f
277.179 140.315 mo
283.703 136.559 li
280.898 134.944 li
274.368 138.7 li
277.179 140.315 li
cp
.866667 .847059 .831373 rgb
f
218.803 375.122 mo
221.627 376.737 li
230.288 355.207 li
279.246 142.081 li
277.179 140.315 li
274.368 138.7 li
218.803 375.122 li
cp
.603922 .576471 .552941 rgb
f
221.627 376.737 mo
228.142 372.984 li
283.703 136.559 li
277.179 140.315 li
221.627 376.737 li
cp
.811765 .784314 .74902 rgb
f
198.514 327.106 mo
200.678 326.49 li
203.027 325.528 li
207.59 326.34 li
207.59 327.106 li
205.08 331.245 li
199.511 334.419 li
196.498 338.974 li
193.516 340.988 li
190.66 339.668 li
190.66 338.907 li
191.103 334.03 li
198.514 327.106 li
cp
.129412 .101961 .101961 rgb
f
219.49 310.148 mo
222.596 310.979 li
225.166 313.694 li
225.166 314.467 li
224.441 316.05 li
221.092 316.899 li
216.718 316.811 li
212.744 317.63 li
209.417 317.102 li
208.167 315.161 li
208.167 314.389 li
219.49 310.148 li
cp
f
209.334 219.038 mo
213.372 217.331 li
216.985 215.008 li
218.36 215.677 li
219.084 218.18 li
218.489 219.038 li
214.959 221.548 li
208.314 227.787 li
204.831 229.997 li
202.75 229.997 li
202.75 219.911 li
209.334 219.038 li
cp
.905882 .745098 .678431 rgb
f
209.334 219.038 mo
209.644 220.273 li
208.481 222.321 li
206.515 222.497 li
204.697 229.702 li
203.802 230.339 li
203.802 224.924 li
206.515 218.761 li
209.334 219.038 li
cp
.745098 .611765 .556863 rgb
f
218.489 219.038 mo
218.106 216.83 li
216.985 215.008 li
221.327 210.82 li
224.802 209.376 li
227.939 209.994 li
230.048 213.575 li
229.121 214.585 li
226.19 214.687 li
222.882 216.801 li
224.289 217.391 li
226.153 217.239 li
226.315 218.372 li
223.394 219.412 li
220.561 219.038 li
218.489 219.038 li
cp
.945098 .945098 .945098 rgb
f
192.229 224.227 mo
186.987 223.254 li
182.751 223.75 li
180.379 225.422 li
179.036 228.881 li
180.379 231.467 li
181.925 233.156 li
192.229 224.227 li
cp
.921569 .901961 .878431 rgb
f
205.925 221.964 mo
204.697 229.702 li
201.947 231.668 li
196.271 231.467 li
193.249 227.921 li
192.889 223.978 li
194.518 222.608 li
196.534 218.18 li
205.925 218.916 li
205.925 221.964 li
cp
.905882 .745098 .678431 rgb
f
205.837 263.153 mo
208.675 257.079 li
210.603 250.188 li
205.541 250.805 li
201.453 265.798 li
204.185 265.798 li
205.837 263.153 li
cp
.164706 .32549 .435294 rgb
f
209.136 235.417 mo
207.816 234.148 li
204.268 233.253 li
205.541 231.467 li
204.697 229.702 li
202.298 230.007 li
198.163 229.045 li
194.831 227.379 li
192.889 223.978 li
190.273 224.44 li
189.806 223.978 li
187.107 224.44 li
183.78 226.689 li
181.616 231.467 li
180.379 236.808 li
181.145 245.37 li
186.41 251.962 li
189.806 259.928 li
194.758 263.723 li
201.028 265.177 li
205.039 264.54 li
206.875 257.926 li
210.603 250.96 li
209.136 235.417 li
cp
.945098 .945098 .945098 rgb
f
198.514 326.34 mo
200.678 325.717 li
203.027 324.755 li
206.206 324.755 li
207.59 326.34 li
205.08 330.465 li
199.511 333.637 li
196.498 338.203 li
193.516 340.215 li
190.66 338.907 li
190.859 335.301 li
191.103 333.266 li
198.514 326.34 li
cp
f
176.886 281.906 mo
184.38 304.835 li
183.457 312.799 li
190.333 332.904 li
193.267 334.29 li
198.389 331.132 li
198.86 326.96 li
195.094 309.834 li
195.436 302.595 li
195.436 286.34 li
184.708 280.333 li
176.886 281.906 li
cp
.203922 .435294 .533333 rgb
f
237.427 244.237 mo
238.88 237.98 li
241.312 236.238 li
244.754 236.591 li
248.897 241.037 li
248.971 242.207 li
247.813 242.306 li
246.106 241.295 li
243.383 246.911 li
241.146 248.159 li
237.994 246.911 li
237.427 244.237 li
cp
.945098 .945098 .945098 rgb
f
219.518 248.517 mo
224.396 255.365 li
227.639 252.331 li
234.085 247.488 li
237.427 244.237 li
238.668 244.726 li
240.836 246.877 li
241.146 248.159 li
232.281 260.876 li
229.121 263.553 li
220.63 264.54 li
211.494 254.386 li
213.52 248.408 li
219.518 248.517 li
cp
.905882 .745098 .678431 rgb
f
208.938 209.362 mo
209.371 211.57 li
208.938 213.229 li
209.644 214.429 li
209.288 219.836 li
208.208 221.468 li
205.925 221.964 li
204.032 221.198 li
201.453 219.836 li
202.561 208.061 li
208.938 209.362 li
cp
f
198.163 202.898 mo
202.182 201.333 li
206.889 204.109 li
208.518 205.945 li
209.136 208.13 li
208.439 212.311 li
206.981 213.937 li
206.981 216.018 li
206.515 216.639 li
204.499 216.639 li
203.654 218.798 li
204.032 221.198 li
202.8 223.44 li
200.558 224.44 li
197.388 224.44 li
194.37 222.508 li
190.891 217.105 li
189.806 211.761 li
190.425 208.061 li
192.358 205.804 li
196.382 202.798 li
198.163 202.898 li
cp
.545098 .286275 .207843 rgb
f
198.163 202.898 mo
193.719 206.157 li
191.2 210.76 li
194.679 206.437 li
198.163 202.898 li
cp
.376471 .176471 .117647 rgb
f
206.358 235.027 mo
204.185 237.667 li
203.802 241.602 li
206.358 246.553 li
211.147 254.437 li
214.779 253.895 li
219.029 250.96 li
219.578 248.263 li
214.309 238.594 li
210.89 235.666 li
206.358 235.027 li
cp
.921569 .901961 .878431 rgb
f
207.816 234.148 mo
201.947 236.037 li
198.214 239.547 li
196.875 244.726 li
194.089 242.994 li
195.38 238.052 li
199.086 234.023 li
205.541 231.467 li
207.816 234.148 li
cp
.243137 .509804 .623529 rgb
f
192.889 223.978 mo
189.396 228.2 li
186.872 232.87 li
186.152 238.956 li
183.365 237.217 li
184.034 231.379 li
186.867 225.992 li
189.806 223.978 li
192.889 223.978 li
cp
f
219.49 309.38 mo
222.596 310.213 li
225.166 311.496 li
225.166 313.694 li
224.441 315.279 li
221.092 316.126 li
216.718 316.029 li
212.744 316.853 li
209.417 316.329 li
208.167 314.389 li
209.962 309.698 li
219.49 309.38 li
cp
.945098 .945098 .945098 rgb
f
199.086 243.843 mo
189.806 239.747 li
182.396 235.417 li
181.104 245.778 li
181.002 256.451 li
179.553 261.594 li
176.439 269.743 li
176.046 281.036 li
179.143 284.287 li
195.436 288.509 li
202.339 287.273 li
216.87 283.966 li
215.531 287.476 li
209.247 309.022 li
212.643 312.208 li
219.029 312.208 li
220.69 309.74 li
223.985 297.48 li
230.588 280.333 li
229.323 275.776 li
226.315 272.631 li
211.766 269.743 li
204.499 269.643 li
205.837 263.153 li
203.802 263.823 li
201.817 263.05 li
198.389 258.516 li
197.849 250.942 li
199.086 243.843 li
cp
.243137 .509804 .623529 rgb
f
216.87 283.966 mo
226.315 280.778 li
224.802 283.039 li
216.87 283.966 li
cp
.164706 .32549 .435294 rgb
f
224.396 255.365 mo
224.755 258.692 li
226.315 258.149 li
224.396 255.365 li
cp
.745098 .611765 .556863 rgb
f
gsave
113.297 282.931 mo
106.753 282.931 li
102.037 280.208 li
102.037 276.219 li
106.753 273.494 li
113.297 273.494 li
118.017 276.219 li
118.012 280.208 li
113.297 282.931 li
113.162 273.997 mo
106.887 274.002 li
102.536 276.507 li
102.54 279.918 li
106.887 282.423 li
113.162 282.427 li
117.51 279.918 li
117.51 276.507 li
113.162 273.997 li
clp
102.037 273.494 mo
118.017 273.494 li
118.017 282.931 li
102.037 282.931 li
cp
.698039 .698039 .698039 rgb
f
grestore
93.2288 265.456 mo
97.5664 266.827 li
96.3708 273.907 li
93.2288 272.091 li
93.2288 265.456 li
cp
.803922 .4 .133333 rgb
f
123.674 267.279 mo
124.394 266.031 li
126.821 265.456 li
126.821 272.091 li
123.674 273.907 li
123.674 267.279 li
cp
.956863 .713726 .419608 rgb
f
90.6494 274.11 mo
95.0977 274.11 li
95.1023 280.746 li
90.6494 280.746 li
90.6494 274.11 li
cp
.956863 .666667 .313726 rgb
f
95.0977 274.11 mo
96.3708 275.887 li
97.2153 279.163 li
96.3757 282.515 li
95.1023 280.746 li
95.0977 274.11 li
cp
.803922 .4 .133333 rgb
f
113.227 267.113 mo
118.801 269.671 li
117.934 276.459 li
113.227 273.75 li
112.576 271.009 li
113.227 267.113 li
cp
f
102.042 269.323 mo
106.818 267.12 li
108.013 269.757 li
106.818 273.743 li
104.156 275.275 li
101.798 273.769 li
102.042 269.323 li
cp
.956863 .713726 .419608 rgb
f
124.943 274.11 mo
126.59 273.393 li
129.405 274.11 li
129.405 280.746 li
124.943 280.746 li
124.943 274.11 li
cp
.956863 .666667 .313726 rgb
f
123.678 275.891 mo
124.943 274.11 li
124.943 280.746 li
123.678 282.515 li
123.678 275.891 li
cp
.956863 .713726 .419608 rgb
f
102.292 273.427 mo
102.287 269.727 li
106.818 267.12 li
113.227 267.113 li
117.763 269.727 li
117.759 273.427 li
113.227 276.046 li
106.818 276.046 li
102.292 273.427 li
cp
96.3708 275.887 mo
93.2288 277.702 li
99.4167 281.274 li
102.573 279.463 li
105.641 280.192 li
105.641 282.769 li
114.408 282.769 li
114.404 280.199 li
117.477 279.463 li
120.628 281.274 li
126.821 277.702 li
123.678 275.891 li
124.943 274.11 li
129.405 274.11 li
129.401 269.048 li
124.943 269.048 li
123.674 267.279 li
126.821 265.456 li
120.628 261.88 li
117.477 263.703 li
114.404 262.967 li
114.404 260.394 li
105.641 260.394 li
105.641 262.967 li
102.573 263.703 li
99.4167 261.88 li
93.2288 265.456 li
96.3757 267.279 li
95.1113 269.048 li
90.6494 269.048 li
90.6494 274.11 li
95.0977 274.11 li
96.3708 275.887 li
cp
.901961 .541176 .168627 rgb
f
120.628 281.274 mo
126.821 277.702 li
126.821 284.338 li
120.628 287.91 li
120.628 281.274 li
cp
.956863 .713726 .419608 rgb
f
105.641 282.769 mo
114.408 282.769 li
114.404 289.395 li
105.641 289.395 li
105.641 282.769 li
cp
f
93.2288 277.702 mo
99.4167 281.274 li
99.4167 287.914 li
93.2288 284.338 li
93.2288 277.702 li
cp
.803922 .4 .133333 rgb
f
117.477 279.463 mo
120.628 281.274 li
120.628 287.91 li
117.477 286.087 li
117.477 279.463 li
cp
f
102.573 279.463 mo
105.641 280.192 li
105.641 286.83 li
102.573 286.087 li
102.573 279.463 li
cp
.956863 .666667 .313726 rgb
f
106.818 267.12 mo
113.227 267.113 li
113.227 273.75 li
106.818 273.743 li
106.818 267.12 li
cp
.843137 .592157 .211765 rgb
f
114.404 280.199 mo
117.477 279.463 li
117.477 286.087 li
114.404 286.83 li
114.404 280.199 li
cp
.956863 .666667 .313726 rgb
f
99.4167 281.274 mo
102.573 279.463 li
102.573 286.087 li
99.4167 287.914 li
99.4167 281.274 li
cp
.956863 .713726 .419608 rgb
f
121.63 312.345 mo
117.57 312.345 li
114.635 310.653 li
114.635 308.173 li
117.57 306.484 li
121.63 306.484 li
124.555 308.173 li
124.555 310.653 li
121.63 312.345 li
117.648 306.796 mo
114.944 308.353 li
114.944 310.471 li
117.648 312.029 li
121.547 312.029 li
124.246 310.471 li
124.246 308.353 li
121.547 306.796 li
117.648 306.796 li
.698039 .698039 .698039 rgb
f
109.167 301.492 mo
111.857 302.343 li
111.118 306.738 li
109.167 305.612 li
109.167 301.492 li
cp
.803922 .4 .133333 rgb
f
128.081 302.624 mo
128.524 301.849 li
130.032 301.492 li
130.037 305.612 li
128.081 306.738 li
128.081 302.624 li
cp
.956863 .713726 .419608 rgb
f
107.561 306.863 mo
110.325 306.863 li
110.329 310.988 li
107.561 310.988 li
107.561 306.863 li
cp
.956863 .666667 .313726 rgb
f
110.325 306.863 mo
111.118 307.97 li
111.64 310.005 li
111.118 312.086 li
110.329 310.988 li
110.325 306.863 li
cp
.803922 .4 .133333 rgb
f
121.588 302.521 mo
125.053 304.108 li
124.509 308.321 li
121.588 306.641 li
121.182 304.939 li
121.588 302.521 li
cp
f
114.639 303.891 mo
117.606 302.521 li
118.349 304.163 li
117.606 306.635 li
115.954 307.587 li
114.487 306.653 li
114.639 303.891 li
cp
.956863 .713726 .419608 rgb
f
128.87 306.863 mo
129.885 306.42 li
131.634 306.863 li
131.634 310.988 li
128.865 310.988 li
128.87 306.863 li
cp
.956863 .666667 .313726 rgb
f
128.081 307.97 mo
128.87 306.863 li
128.865 310.988 li
128.081 312.086 li
128.081 307.97 li
cp
.956863 .713726 .419608 rgb
f
114.792 306.443 mo
114.792 304.142 li
117.606 302.521 li
121.588 302.521 li
124.403 304.142 li
124.399 306.443 li
121.588 308.065 li
117.606 308.065 li
114.792 306.443 li
cp
111.118 307.966 mo
109.167 309.094 li
113.015 311.316 li
114.967 310.192 li
116.877 310.642 li
116.877 312.245 li
122.322 312.245 li
122.317 310.647 li
124.228 310.185 li
126.184 311.316 li
130.037 309.094 li
128.081 307.97 li
128.87 306.863 li
131.634 306.863 li
131.634 303.721 li
128.87 303.721 li
128.081 302.624 li
130.032 301.492 li
126.184 299.27 li
124.228 300.398 li
122.317 299.943 li
122.317 298.343 li
116.877 298.343 li
116.877 299.943 li
114.967 300.398 li
113.015 299.27 li
109.167 301.492 li
111.118 302.618 li
110.334 303.721 li
107.561 303.721 li
107.561 306.863 li
110.325 306.863 li
111.118 307.966 li
cp
.901961 .541176 .168627 rgb
f
126.184 311.316 mo
130.037 309.094 li
130.037 313.219 li
126.184 315.441 li
126.184 311.316 li
cp
.956863 .713726 .419608 rgb
f
116.877 312.245 mo
122.322 312.245 li
122.317 316.362 li
116.877 316.362 li
116.877 312.245 li
cp
f
109.167 309.094 mo
113.015 311.316 li
113.015 315.441 li
109.167 313.219 li
109.167 309.094 li
cp
.803922 .4 .133333 rgb
f
124.228 310.185 mo
126.184 311.316 li
126.184 315.441 li
124.228 314.306 li
124.228 310.185 li
cp
f
114.967 310.192 mo
116.877 310.642 li
116.877 314.767 li
114.967 314.306 li
114.967 310.192 li
cp
.956863 .666667 .313726 rgb
f
117.606 302.521 mo
121.588 302.521 li
121.588 306.641 li
117.606 306.635 li
117.606 302.521 li
cp
.843137 .592157 .211765 rgb
f
122.317 310.647 mo
124.228 310.185 li
124.228 314.306 li
122.317 314.76 li
122.317 310.647 li
cp
.956863 .666667 .313726 rgb
f
113.015 311.316 mo
114.967 310.192 li
114.967 314.306 li
113.015 315.441 li
113.015 311.316 li
cp
.956863 .713726 .419608 rgb
f
342.149 365.806 mo
343.487 366.577 li
341.655 370.031 li
337.271 371.126 li
315.496 383.749 li
313.452 382.57 li
313.452 381.437 li
315.177 381.564 li
335.232 369.945 li
337.105 367.421 li
342.149 365.806 li
cp
.784314 .784314 .784314 rgb
f
342.149 365.806 mo
343.487 366.577 li
341.655 368.891 li
337.271 369.987 li
315.487 382.611 li
313.452 381.437 li
335.232 368.812 li
337.109 366.281 li
342.149 365.806 li
cp
.921569 .901961 .878431 rgb
f
313.807 379.977 mo
316.225 384.157 li
316.23 388.098 li
313.821 389.501 li
310.402 387.528 li
307.979 383.35 li
307.975 379.407 li
310.383 378.016 li
313.807 379.977 li
cp
.129412 .101961 .101961 rgb
f
316.225 384.157 mo
316.23 388.098 li
318.929 386.525 li
318.924 382.584 li
316.543 383.403 li
316.225 384.157 li
cp
.0392157 .0313726 .0313726 rgb
f
313.807 379.977 mo
316.225 384.157 li
318.924 382.584 li
316.502 378.403 li
314.624 378.666 li
313.807 379.977 li
cp
.176471 .145098 .133333 rgb
f
310.383 378.016 mo
313.807 379.977 li
316.502 378.403 li
313.088 376.447 li
310.383 378.016 li
cp
.305882 .254902 .235294 rgb
f
297.938 394.313 mo
297.948 397.659 li
315.339 387.544 li
315.334 384.201 li
298.211 393.665 li
297.938 394.313 li
cp
.0392157 .0313726 .0313726 rgb
f
312.801 387 mo
312.801 387.772 li
312.331 388.594 li
301.238 394.978 li
300.772 394.701 li
300.772 394.62 li
311.786 388.257 li
312.262 387.447 li
312.262 386.766 li
312.331 386.725 li
312.801 387 li
cp
.305882 .254902 .235294 rgb
f
312.262 386.766 mo
312.262 387.447 li
311.786 388.257 li
300.772 394.62 li
300.772 393.937 li
301.238 393.114 li
312.262 386.766 li
cp
.764706 .54902 .286275 rgb
f
291.446 398.552 mo
296.023 398.775 li
297.948 397.659 li
297.413 396.048 li
291.036 396.653 li
291.446 398.552 li
cp
f
288.964 394.267 mo
291.049 390.193 li
292.973 389.081 li
294.109 390.345 li
290.408 395.566 li
288.964 394.267 li
cp
.854902 .709804 .352941 rgb
f
297.948 397.659 mo
292.475 397.961 li
291.543 397.532 li
291.75 395.965 li
298.363 392.643 li
299.549 395.338 li
297.948 397.659 li
cp
.0392157 .0313726 .0313726 rgb
f
292.973 389.081 mo
289.988 393.672 li
289.9 394.697 li
291.363 395.292 li
297.528 391.213 li
295.784 388.838 li
292.973 389.081 li
cp
.305882 .254902 .235294 rgb
f
297.938 394.313 mo
292.475 396.291 li
290.717 396.111 li
291.442 394.507 li
295.876 390.753 li
297.943 391.928 li
297.938 394.313 li
cp
.803922 .635294 .301961 rgb
f
295.876 390.753 mo
297.938 394.313 li
315.334 384.201 li
313.277 380.655 li
296.577 389.641 li
295.876 390.753 li
cp
f
292.973 389.081 mo
295.876 390.753 li
313.277 380.655 li
310.374 378.978 li
292.973 389.081 li
cp
.305882 .254902 .235294 rgb
f
309.521 381.463 mo
309.521 382.012 li
308.847 381.654 li
307.906 381.654 li
296.803 388.045 li
296.767 388.02 li
296.767 387.482 li
307.906 381.079 li
308.847 381.079 li
309.521 381.463 li
cp
.129412 .101961 .101961 rgb
f
309.502 382.025 mo
298.382 388.419 li
297.436 388.419 li
296.803 388.045 li
307.906 381.654 li
308.847 381.654 li
309.502 382.025 li
cp
.94902 .882353 .458824 rgb
f
288.964 395.938 mo
289.997 397.721 li
291.446 398.552 li
292.475 397.961 li
292.475 396.291 li
291.442 394.507 li
289.988 393.672 li
288.964 394.267 li
288.964 395.938 li
cp
.176471 .145098 .133333 rgb
f
289.661 382.058 mo
290.994 382.828 li
289.157 386.28 li
284.774 387.378 li
273.395 394.002 li
271.346 392.823 li
271.346 391.69 li
273.081 391.824 li
282.744 386.204 li
284.608 383.666 li
289.661 382.058 li
cp
.784314 .784314 .784314 rgb
f
289.661 382.058 mo
290.994 382.828 li
289.157 385.147 li
284.774 386.238 li
273.395 392.865 li
271.346 391.69 li
282.734 385.064 li
284.608 382.533 li
289.661 382.058 li
cp
.921569 .901961 .878431 rgb
f
271.706 390.232 mo
274.124 394.408 li
274.133 398.351 li
271.715 399.747 li
268.301 397.781 li
265.878 393.605 li
265.874 389.664 li
268.287 388.264 li
271.706 390.232 li
cp
.129412 .101961 .101961 rgb
f
274.124 394.408 mo
274.133 398.351 li
276.833 396.777 li
276.828 392.839 li
274.447 393.651 li
274.124 394.408 li
cp
.0392157 .0313726 .0313726 rgb
f
271.706 390.232 mo
274.124 394.408 li
276.828 392.839 li
274.405 388.656 li
272.528 388.917 li
271.706 390.232 li
cp
.176471 .145098 .133333 rgb
f
268.287 388.264 mo
271.706 390.232 li
274.405 388.656 li
270.996 386.695 li
268.287 388.264 li
cp
.305882 .254902 .235294 rgb
f
262.644 400.541 mo
262.653 403.884 li
273.242 397.797 li
273.233 394.454 li
262.916 399.895 li
262.644 400.541 li
cp
.0392157 .0313726 .0313726 rgb
f
271.775 396.66 mo
271.775 397.419 li
271.295 398.247 li
265.14 401.798 li
264.669 401.523 li
264.669 401.44 li
270.756 397.91 li
271.231 397.098 li
271.231 396.42 li
271.295 396.378 li
271.775 396.66 li
cp
.305882 .254902 .235294 rgb
f
271.231 396.42 mo
271.231 397.098 li
270.756 397.91 li
264.669 401.44 li
264.669 400.762 li
265.14 399.936 li
271.231 396.42 li
cp
.764706 .54902 .286275 rgb
f
256.156 404.783 mo
260.733 405 li
262.653 403.884 li
262.122 402.273 li
255.74 402.885 li
256.156 404.783 li
cp
f
253.669 400.494 mo
255.759 396.42 li
257.678 395.308 li
258.818 396.57 li
255.113 401.798 li
253.669 400.494 li
cp
.854902 .709804 .352941 rgb
f
262.653 403.884 mo
257.18 404.19 li
256.248 403.763 li
256.46 402.192 li
263.073 398.868 li
264.263 401.567 li
262.653 403.884 li
cp
.0392157 .0313726 .0313726 rgb
f
257.678 395.308 mo
254.693 399.899 li
254.605 400.928 li
256.077 401.523 li
262.237 397.439 li
260.493 395.063 li
257.678 395.308 li
cp
.305882 .254902 .235294 rgb
f
262.644 400.541 mo
257.18 402.517 li
255.427 402.342 li
256.147 400.732 li
260.585 396.978 li
262.648 398.152 li
262.644 400.541 li
cp
.803922 .635294 .301961 rgb
f
260.585 396.978 mo
262.644 400.541 li
273.233 394.454 li
271.18 390.903 li
261.282 395.866 li
260.585 396.978 li
cp
f
257.678 395.308 mo
260.585 396.978 li
271.18 390.903 li
268.278 389.226 li
257.678 395.308 li
cp
.305882 .254902 .235294 rgb
f
268.485 391.114 mo
268.485 391.663 li
267.816 391.307 li
266.875 391.307 li
260.706 394.867 li
260.664 394.842 li
260.664 394.304 li
266.875 390.733 li
267.816 390.733 li
268.485 391.114 li
cp
.129412 .101961 .101961 rgb
f
268.462 391.674 mo
262.284 395.241 li
261.338 395.241 li
260.706 394.867 li
266.875 391.307 li
267.816 391.307 li
268.462 391.674 li
cp
.94902 .882353 .458824 rgb
f
253.673 402.172 mo
254.707 403.951 li
256.156 404.783 li
257.18 404.19 li
257.18 402.517 li
256.147 400.732 li
254.693 399.899 li
253.669 400.494 li
253.673 402.172 li
cp
.176471 .145098 .133333 rgb
f
132.764 349.702 mo
130.065 349.702 li
128.058 348.544 li
128.058 346.749 li
130.06 345.588 li
132.764 345.588 li
134.767 346.749 li
134.767 348.544 li
132.764 349.702 li
130.208 346.151 mo
128.612 347.074 li
128.612 348.223 li
130.208 349.146 li
132.612 349.146 li
134.204 348.223 li
134.204 347.074 li
132.612 346.151 li
130.208 346.151 li
.698039 .698039 .698039 rgb
f
136.262 348.802 mo
133.419 350.447 li
133.013 348.269 li
134.582 347.494 li
136.262 346.887 li
136.262 348.802 li
cp
.603922 .576471 .552941 rgb
f
176.683 323.954 mo
175.811 326.755 li
175.096 325.078 li
175.664 323.089 li
176.683 322.032 li
176.683 323.954 li
cp
.67451 .65098 .623529 rgb
f
170.911 321.749 mo
168.95 324.3 li
168.239 322.618 li
169.891 320.89 li
170.911 319.833 li
170.911 321.749 li
cp
f
175.811 326.755 mo
174.33 327.613 li
173.615 325.941 li
174.127 325.445 li
175.811 324.838 li
175.811 326.755 li
cp
.603922 .576471 .552941 rgb
f
174.33 327.613 mo
169.19 327.754 li
168.488 325.145 li
172.499 325.329 li
174.33 325.694 li
174.33 327.613 li
cp
.67451 .65098 .623529 rgb
f
169.19 327.754 mo
136.267 346.763 li
136.271 344.843 li
152.223 334.182 li
169.19 325.832 li
169.19 327.754 li
cp
.603922 .576471 .552941 rgb
f
133.419 350.447 mo
129.405 350.447 li
128.939 347.979 li
131.588 348.168 li
133.419 348.528 li
133.419 350.447 li
cp
.67451 .65098 .623529 rgb
f
129.405 350.447 mo
126.563 348.802 li
126.563 346.887 li
128.081 347.326 li
129.405 348.528 li
129.405 350.447 li
cp
.811765 .784314 .74902 rgb
f
132.686 345.868 mo
130.139 345.868 li
130.139 343.953 li
131.565 343.519 li
132.686 343.953 li
132.686 345.868 li
cp
.67451 .65098 .623529 rgb
f
130.139 345.868 mo
128.339 346.908 li
127.854 345.383 li
128.404 344.202 li
130.139 343.953 li
130.139 345.868 li
cp
.603922 .576471 .552941 rgb
f
132.686 345.868 mo
134.485 346.908 li
134.97 345.383 li
134.421 344.202 li
132.686 343.953 li
132.686 345.868 li
cp
.811765 .784314 .74902 rgb
f
134.49 346.463 mo
132.686 347.504 li
130.139 347.504 li
128.339 346.463 li
128.339 344.993 li
130.139 343.953 li
132.686 343.953 li
134.49 344.993 li
134.49 346.463 li
cp
175.779 321.195 mo
173.809 323.691 li
170.763 323.638 li
168.95 322.381 li
170.911 319.833 li
168.221 320.392 li
165.872 321.753 li
165.872 323.917 li
132.949 342.923 li
129.405 342.928 li
126.563 344.569 li
126.563 346.887 li
129.405 348.528 li
133.419 348.528 li
136.262 346.887 li
136.262 344.836 li
169.19 325.832 li
174.33 325.694 li
175.811 324.838 li
176.683 322.032 li
175.779 321.195 li
cp
.866667 .847059 .831373 rgb
f
158.438 330.666 mo
158.438 330.936 li
157.492 330.394 li
156.163 330.394 li
142.021 338.558 li
142.021 338.291 li
156.163 330.128 li
157.492 330.128 li
158.438 330.666 li
cp
.67451 .65098 .623529 rgb
f
158.438 330.936 mo
158.438 331.439 li
144.286 339.599 li
142.957 339.599 li
142.021 339.062 li
142.021 338.558 li
156.163 330.394 li
157.492 330.394 li
158.438 330.936 li
cp
.811765 .784314 .74902 rgb
f
106.495 353.011 mo
104.229 353.011 li
102.55 352.044 li
102.55 350.537 li
104.229 349.564 li
106.49 349.564 li
108.17 350.537 li
108.17 352.044 li
106.495 353.011 li
104.354 350.03 mo
103.016 350.805 li
103.016 351.769 li
104.354 352.54 li
106.366 352.54 li
107.708 351.769 li
107.708 350.805 li
106.366 350.03 li
104.354 350.03 li
.698039 .698039 .698039 rgb
f
109.43 352.261 mo
107.044 353.638 li
106.702 351.811 li
108.018 351.158 li
109.43 350.65 li
109.43 352.261 li
cp
.603922 .576471 .552941 rgb
f
143.345 331.406 mo
142.607 333.762 li
142.011 332.348 li
142.487 330.682 li
143.345 329.796 li
143.345 331.406 li
cp
.67451 .65098 .623529 rgb
f
138.504 329.558 mo
136.857 331.697 li
136.257 330.287 li
137.651 328.834 li
138.504 327.95 li
138.504 329.558 li
cp
f
142.607 333.762 mo
141.365 334.477 li
140.77 333.072 li
141.199 332.659 li
142.607 332.151 li
142.607 333.762 li
cp
.603922 .576471 .552941 rgb
f
141.365 334.477 mo
137.06 334.595 li
136.474 332.41 li
139.833 332.567 li
141.365 332.874 li
141.365 334.477 li
cp
.67451 .65098 .623529 rgb
f
137.06 334.595 mo
109.434 350.542 li
109.434 348.934 li
122.825 339.989 li
137.06 332.987 li
137.06 334.595 li
cp
.603922 .576471 .552941 rgb
f
107.044 353.638 mo
103.676 353.638 li
103.288 351.566 li
105.512 351.721 li
107.044 352.028 li
107.044 353.638 li
cp
.67451 .65098 .623529 rgb
f
103.676 353.638 mo
101.294 352.261 li
101.294 350.65 li
102.559 351.024 li
103.676 352.028 li
103.676 353.638 li
cp
.811765 .784314 .74902 rgb
f
106.43 349.797 mo
104.289 349.797 li
104.289 348.189 li
105.489 347.824 li
106.43 348.189 li
106.43 349.797 li
cp
.67451 .65098 .623529 rgb
f
104.289 349.797 mo
102.781 350.671 li
102.374 349.386 li
102.836 348.394 li
104.289 348.189 li
104.289 349.797 li
cp
.603922 .576471 .552941 rgb
f
106.43 349.797 mo
107.939 350.671 li
108.345 349.386 li
107.879 348.394 li
106.43 348.189 li
106.43 349.797 li
cp
.811765 .784314 .74902 rgb
f
107.944 350.293 mo
106.43 351.17 li
104.289 351.17 li
102.781 350.293 li
102.781 349.061 li
104.289 348.189 li
106.43 348.189 li
107.944 349.061 li
107.944 350.293 li
cp
142.583 329.092 mo
140.936 331.189 li
138.371 331.143 li
136.857 330.089 li
138.504 327.95 li
136.243 328.421 li
134.268 329.563 li
134.268 331.376 li
106.652 347.323 li
103.676 347.326 li
101.294 348.71 li
101.294 350.65 li
103.676 352.028 li
107.044 352.028 li
109.43 350.65 li
109.43 348.934 li
137.06 332.987 li
141.365 332.874 li
142.607 332.151 li
143.345 329.796 li
142.583 329.092 li
cp
.866667 .847059 .831373 rgb
f
128.035 337.043 mo
128.035 337.267 li
127.245 336.812 li
126.134 336.812 li
114.265 343.662 li
114.265 343.443 li
126.134 336.588 li
127.245 336.588 li
128.035 337.043 li
cp
.67451 .65098 .623529 rgb
f
128.035 337.267 mo
128.035 337.684 li
116.162 344.539 li
115.054 344.539 li
114.265 344.089 li
114.265 343.662 li
126.134 336.812 li
127.245 336.812 li
128.035 337.267 li
cp
.811765 .784314 .74902 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (1907.i109.039.P.m004.c30.programming development isometric icons-12.eps)
%%CreationDate: 7/27/2021 2:10 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KlWY;imdU+!T4e1ZoKl2T#\22>4Ti&;&41*):n[Oj%7u)7gmZDHVu,HI\%e(Z1JVPF%#+*pg$ID#TK'5'bH`D:o"r7UZe$U,
%)],!gIo\ATFfikC-1JB\=n!ZpQM']r/M+Q5*`Y8CRc^*9?G4eN*k%Q78uK#GX>Sb'e]cUJ@O&3d]RWe8R?*V:Xnd0QZW8V__09q3
%mV/@uWt_#iHEirJ=\Ab^;t8tY*V^Bm^n1e#TC182FBn'R@5NL=oR!sOBm'eZn_`?h0:\1Yggsj&6fDAWrcPtp:?9/BrittUYE'5h
%DO8I_O"7>A]@a5D)pluIL;8:sn6mYN3A:)@>reKMfF!)o50>"*-^fT&69=+1$jK#9J!Tq,r^OO#T`84Cq#@R$oI'R)B'bI$q`-d_
%@inZ.?rk9eiFAn%5U%3kA5Nb5E4=Y>eVigqcLBN*Ag`jiX&eRfjKs!rAmP2eVtb31YPJV\Q*R[4H.I-=Z0f&(T)ih)Z]%1sf5e0_
%UV7:s9]`HmjmUaDMb:6ZBe.<H[CaK0s*t53/eVhHn56AiBtnLa].eUZ@(r/@rFWT<"1Eki0@YkG9FS([^K$2U@f)nJ"T`PmH8oiD
%):-a'^$aGFMSCVh_*iEdd&JotRd\0[WC&hALA=T!Agtn7f*C_JNfDMGICL.]W%mTV0-W[r)EGhE4Tq`JBNHjeNR_SNA:[UP"Fd7S
%/VioBBuZ?d#r8fXn]072e7aF,DR\'@_^G(uCYr5S<d+K[]A@Fi\!hH0KF\!m=b/lSEiLuMe>M7Yi\NjICFNEii:M.*^//Yhid_!o
%[J\614fn>7_jttWf@k)32uii[`E]s!<ls].)jQB[0I&c0PZ\^)@_;M]Z[E"lmZoBB:b-(7e^gKM8<9r(h9tC-=p;SGicgYc\(Ls/
%/8#I<I_[Um"a*Z(Ug5MP`UJ6$-4*#+Q+!P3^+4Z_s!IP*-m9FTLd4;9)h1k&c'Eo_[S)5BYZ>QSgB#dq/H#aE'Ob$0Ph<4grK%:4
%Lis0Y,-^]8b1Hp<7u=f,Ft[8gWAMbg!5&.d*'$nA@7`.j'l15B7D%3`XHkW2m9\s2F4+mU!phY6#<eKIM3%.q$-DC3g5U`>UaOls
%C,"9`-oq*o$19D?<a8GiiAC5%)7*VO_P/+rg`tPns'5c0Zr]C`,`KdYl=\@F[8RU?Rug"aD:MOdEr;ueXX%*;a!EIM3$.aB'_"\F
%YJm>&h$[!4H*m[M6KYdZm8h*3frV[0=Nqgm(0_Ni+l2]K7-U;[^1Qe;bKFC>1h+Q;O5K??(=GVrAL7+3ZO4Hqf\_#b(5V`G?S.s;
%;/H7No?g`RnXk-0!?Wor"5;;3?FKunC^D$Bg?mm-S'klU<c1tWU'8fCm"0g!5/b4I^Q<:,E048R_P>>t0d(=<oJcWI=R2qeIojhL
%b9>+K`O]jh"&SBN-CU=F9(h2LRt)F50J.=.&G&[!3rYO`&q2,LiE(=NjE=>6JCF,/G3pq@GJ;]<r]&IX),FDCS:EG4PSS+1@BCH.
%qfnRTKdmar<<D1V=t_0HA^XOg\(<eGB<kC7N9?6!el]?`aAX7<Ni/Z"WumS;`P3lo-J<4*R\Io-mWc%_MOdA5?2<0+fhA,`#25tD
%*(o.6inBYmYEi^+dgabMVpRWp<l)?f:Js]i_gkSs3UCOP:tZ8PJ;g41]TT@dN)LY7^dl^<.T:HEm'TKO*U0:Ff]X5F2S)A(+uaUo
%"qf*\V-O4*/-.2.e&bVse]':Kh`ihPp%9M6ZArnP&hKA61^[ZmN$#i-^2ffJRsT;l8'KbpRk,2Le?a5YT&'F$B6W2bK&9IQh5kd3
%`OAJ_]2RqJ-&AtQ?+[X_2g=ZOY2.m@S%EjMmb17MQ(kMj7OoC]QMfEYiHGVN\m,;BBZ(1(kXm@,2!!q[9XU:\Ac.k5RgPF`Q#Wq%
%PT;((>E-'iC<*e6p#]Tf/9mhpQAcupoO`@'e/@l]4hhc-+%t6Oqt,J#$"tj`P3gbo<EaLO/$2u0af/[Q>cqP5>*:<AR\hu))6u`6
%$ut6E.g(:Pi+Mh/%J*N=djff?U3:Xr[-0'lr\"1B+GerRFc5X?cBi@8SgdpIS6$ZI9s$Ub>*WPUT4jK-D:<PW)bCfKWRS!C0H30s
%;DT5h(>;;%J7k.*6r'+aQPM$@<iqg$N_78o$$5SL:_Yf^eV,G1WqAb(21aW`=`*@0T-iS^)&Z?d-Bg0O>ci-OS:LqS:D3%Fk:;$^
%`D*:!iBFSnb41C\@^"7[()ra\AT4qt5Y22g%XQ#.a##ECKW8n;=3o+00<ZC(T$9O_,\qr6n\1u""4u">'<_lY"S]'R9qOuZ2G26%
%DHFH:oh%0bnt.D^Q=/NRfh!O2:0Tk/[QUghS0rJTOq;Vu+q7*ZrNOM+4rTsEfd*Kc+QAi:lub4]2!8tqd_;Y&1XeJ&Q(s_=+]%A@
%Ee7La'-ChTT-;P,OQU8to/#J')=f@m(d(6aelkCW1I!fnO/2T^nbh0%2,`qn\<nD#5<h)u^r)F/2sBGf`Y0?WSt?rt[LO]ecd-r0
%DT5D`)G!QDe7aFO3W)WKZ_c,dT7_o@%%DR+]t_=-C@5e6;+jM^?gA#q9!,J&AcmFL7Zs#Nq*nQ;r=W,.a-0WCg&]Q.\V0't'2U[`
%KnT?OUhp>m'd64,M),\iF6?u;aUOG*NO*fUY#H<TYbP:NWf;&lU:Ku![99PPf@lM\>-hLN$pF<Qa3Wo<Z[)Ib*^?.7cR-n=,$ojW
%O5bYhoj4B`>=$H>Ul6TBVc&0)&k6Vp[OHuGnl=Xmlm4/&[e(pP+rm:>AXQ;if]/G0T\A/lRg'NCCa$,'D#l`o^Z2aum^/s9\,B)1
%%(8QDQfqLK,;?sjU.9Qi^f'eTo>&O3n1kNebQBMV.a0(=0.I;Ri\0o=b<58L&%p*g0D!!&Zj'iO,Q.=N8m.MdOQHS>CC]E-3BZm=
%d_nS9Y!pmZ#Ei]+AAoY$':l"4RdPbB[;&dU/NcC8@+K(2-b4Rg0344$X-I(5-G<MMneC0,03"'E53@PKk*tD=2TJt#jHP&0TD4Cc
%?H$W12o]"!icInMEoK$uGnm71g`36^]_raqlb%hu]Rj'c@S5EYHJgXm0iR\ZlS=lZ-XMuK0bob^dP&&P<;A9r9:B:[1RGq5N["q)
%@=9qeb($\QRB)4=nR8la1`[shhh+Y=Uj:@G3)\07$d;f$4M_]Eo<K/]C4YOCH)ED*.3t&fS;29aSFCK=C:(j:grW*[%*D-mXE'1F
%<Y?=6R(DC/;HI00UXoETX0(tsZWWSsorD`5@d.VZ,=0RTYuL,i>.(YmG+N'_0)iq8Bo-*3b6&E]U(buF4'FYhAQ1q2S'"a\\La&9
%IrESfGg3T!OAlHY\d:'3flXtRFn;E?8P?"MFPSjYkr5=4CfYJBcYNA7VQQfRhj92f#6(floFkcZ_S[tD:7ual\"tDo4?P@-V<6l_
%k'#,,%[u`IFlLTl9P;&0jRiC(QJ7gq)ru(0BPnL.Dii;$;)H$R51)+Rq$lm$e-,@^j:e^&ju:@/=K0P`O:P@6'0@<-960XKnUG\&
%S6mD2mu*B=ZqU>1357^Bh]&J%Dk+fQo'[m?-/Xj5SCm/`,bMH3q(if'oZY>t*Q:uM`-Jssl5"0=S(/cZUAWkM\HpPXliC^n=$H\r
%s%68$hJA\t;->EcC"?Fl;^o((5C8Yb.ES]kJbEg*G1(/uokH18";3[OcIcsH<SqI2GH9QJY_1B<)cYJXUfpEu[/*t(]TnEj_o^Kj
%ocg&%:tK))FSH>n]/(W_BGrbFFk#3b.g2$?e:2I&"d&8=l=XPF;QCb6mb--ZmJTmtD6h^1N8B;YXmL:<,@e"qdD7A@/H'X@Rrlet
%-#fA$^;e+^]ZA#:XEtBAipo?5DMD3i26?2%?g]_:>5(+*brio3^TS.\g`r=-KlB1<2t8q[A<U7fRN'c@/u0$@Q$/kTSu%Op+50hp
%nPH`"4A3PGWJF<t9S+K961DL^dB1.6.;P,6Y>I?L8i8@s6C-^N.l6L#[PJ`+[)J!J^,"G:2*"(73-aQ\Ug7eYcBGoV0S)!?<6-3Z
%N7hmr1Hd,Bf9s2Ea0i*ubsNTQNG/tRDn0'=cY.oEoPgt6+m1;?IjW/*%ujto*`!Ep_@WlAK5oDA0DHed!b63/97P/mHV)#KH04R;
%AH%m,Tg5<:,Q^3,l,uXFBPP2RdOi61pckCQ4DAQF?)]d_8tbZ^M]69_&+"tW1t;q/Y]VgeCg>6WW(<ZWbaN+SpX`mP@n@VQT,*^[
%YSCcI0I8`nPc`@XUKqTaMFg^UMreue>91<)qIV-h3mmirH+R3TU(Tl#Zm[BSr\"1B+DS..G)Pa@>I&(5(.m%G\T2"n,Utk_i`R^R
%o82%\d5J\/\rgMPPtJ`9Y?"=0.dLl?(0S%[UJac^`4&^IQ1g\=+tH.3KSIO>$%ip2eU!s8piD"RBtpU3aJ#)F'7330)?.\J/*EVT
%nU_rOV\C5s`]m^_:V$GCAlLs_mC;rP[OiFP>J?toIiRc25oTcG@QDp$JBmUAc.Ca#Fj23<&^:*?9>H/TR[^LkiG/pi'"?q*A!T50
%FPU?l%BK3r5IA?AYb58Q=*mNubdq5o[d`W_=Y<cG`"$\$@7`=<UY0Nj2J^Qq"=If&c$/KBO3KOh!Z'!;hd#ct2;dJ152oZPj+ZU`
%C,s\*8ZH'"ZCd)Cb=]'QLOt7pOg@`FOHZIE`'9G\7$?W''GGqkI/nGA94\/N2sgZJg'sREb4()`J30Z#Ebf:B=@i.qjj^)!c-&l,
%EgUOg(/J%7H\Rj5N')<RUd3D)=.,KnR@8e/hZ"/VC;T_"45F8c*`86jdLn9^G@S'fVOS7s265&Gc_%QChgWjsfsRma+u&811U.RT
%1#\][\GqE,peLrHrfapQES.A<?`fpS"ZN8ki_>&NY3.@uH;9n5R)'"fBC.Nqr[R(6/%&N*Q#lpKkJ2Jh?f[`Uc#FYmi9M@&b[t"P
%8Xkk<9:UKN'_?^F>Kq9bUIbmc!`>/mC!9L5-J0&+E//\0W\G)$f*oA)2Bt_`o9>4P9\GfQSb@8l`GE*hP;Y4H0S2ALP;;m_VSQ?'
%Xh,PGCu*niD?=i*4pNA?&JLae&f8r_K`\mXLrMQO1#:\gJnr<rLrPZ>.9!R;AgF,0bs4ZA#n?K^`e<ffo8(D^Wpt@&@ij$bQAC8Q
%9+d.O`(Wln@g6[FbY0;iW_-T,'ac.7G3q!#_3h<)`VFB&l'k1(-Ir+\N[p60^5jJP23ofpnk&K]VXA"K.r3DtX&pd$1DCt!UaN#<
%Pk@*!mj]TH\;?:*b\u5^^Y"\2C72i<0_b>(rncGfRq."%JU'9MpL_8!S&*.8'4eOHTuWLMWk$#+GPL;1hq[1[4+)+)DoNe]1.r,7
%N0Tm)KoG+];_f(OT.;G:US!>A3f_?h`o#r<ZN!G-]Hl7rUegV6AW;jhJu\uPp@cn8Um',35+5Tg/W%q7l"Y%#663D/`obEZY.Xbp
%_Oh!I3scKtUV:=`#.T'([7J_Ni)BRGap]>d,rbst\mr+R=h(_R-*b%YoIM]<"AR5AP%;V*oF5D]S2p,/ce0l)c:C:?I-".m/tRZ8
%l3ZOOPOr:hFC-<:,rh(A\h#`XQ.g5S<[f?dn"X5]MnYqhkD%Td0D^ruGFNufe#F-UQ$T:Sh(Q46Em(Eu!F:;P[]/b<c4]p!PJ;So
%+C]ZjcQj:NV!jpV7fSg3r(-[5*)E[20o9&8)lB^s[dXISrD?0rZLuu*/0r"Y+_#as64tS-kpdjuPH4_;;Iu'#g<SH<b't&B:!]lJ
%>-a*X>'b7[@*s+d8Sk,5H8HlY6A(f$o@IIH@jr@1T@u[BgJ?(hP9`$[A?3)YBNKjGO^OX#j_D:$=/$Q>RSL)a4E!1E8[O%^Q51L[
%g>BkV#m:^Gf5@jaE$LZ#ditd=Ca>.O;Q3adNQ=TQP;f7VC?Bho=ZWTg,dK.(]<k,.<?%34K!LW;@]d#p9N(`2BUYr6;/B4tM*u+C
%:Q8`d$F5t0+VQ..&_#dqb^aW<I*4BXkF!a5ktB9+-43<U+IfrAPgXBDU<IR"Z6V4_2*4L+4b(nhR!C=,`,@l:=ia$'6H"95:RWo-
%Jm=NC-Ls88AY+f8cUIZ%bsa)+67tkC,,T#QSB5"M1=&CW(B%:&Kj9if6qiY6R-13^R\[:dCu.#2e0NH\f9"B:kAn-Uc:X<o31l&l
%X7.f+'CeR_Olcp]WiDa@fOhb$5dr/m`rFNj9[gMH,mh^h9<FUHpm>M?oMjP^<RLhIfpTCF]:#Bdn='*Q/%Pj7Qn,bYU73Yo:im)U
%?"0@B2p-]g'/14gVluSL6bq+R7*Ea\^58i"jsU3.fB\atb`eY>ep?i[JLE%,\uOOJX(4-C^!:2$^Xsr@J4_t<QXPj550V)D[u.Rs
%og182eb#ZjXKB:q^!^K9a"*3+=Z%<EU45.PJ@$K[6OJR-&3n(20m,7iZG[j_O3/mAm18*@TB4e_j6j*SV$!dW<MTA66i;[3@du71
%6a9_YIKdj0>:!at**;I.=s[imAIe2_*U1TD4qnTL"Fk!nCJg`RbIGk\>Pql+$7'22M_IYLm6_Au5kK!0n@+bRdgq!-%?/BpB0LgQ
%1?F#'LI\iiTT:i:jff"9TtHhGlQ[ngU;h9;YZRrJ]+moWiE>_k07No;.J^hhZfM[NIi\=9rPCRWs18!G_OlC38Do:'+BObVl/2M%
%/A[t'OG[GIf:1R/C8]fFTi"k4-GM!&TIn*;a1pnPbo3>QJ#3u!J.Cm2%6EAtp$h0%?gN@i/Y&tW!6Q8[g:&R5^t>r%4s$m*TlHb*
%s''/SWL%&j`5:c[ST`t6nNipkqH'rX=W>!16=]q$X?dPZVUPS2e?eGA.a"BEO6K#9@-M[-S)g`D(m3L!Bd/@-F9)^%eXE>8b#i":
%N'oV<9qf'W,=\,"$`D,/\lq3hO9LKY82@fV:Hg7^;QnPdf)MCHQj>1FVtsHo8kp\@]p>Jo;%[+$'[][n4VST)E_64JXIJ8?[m9rI
%j-d$Ggc>C]o!e?b==0SB[59s[SGInN?&ntmN[i$%#eC[4iZpu+53"I3o\!BeLcq'<AFDR9TboFEV,*f0ZOZO'Z1O%#\WUHi&?;%q
%ms<)&DJYP2%-,rm&-`MZZe6<ecWRR^7b(i,]R/#.-Fi1j"r$s``7Pek@ES)GGTCNS$k(_V-=Rtf9".n,MsD,_j55)8pW=t%P"=_o
%ecKCHV7Kg1<6?VImgS9C(Aur?lo+^@RB$O:I*GtVF4"n!>,0hQ4&%8#OTG>PGhLKqI\p+]<SEj9<E-6Mq/>5l`$X;`Z-d8#gN]b2
%\uh9lq1&#j?0Y84BO#@tc^Mgr3E*f]eI7/WH^008O1%srR-WJoE+B)tY6<<5[V)r:=Nnc=a!,C+*qrdD@8k$ZcOQE/GhZ9(nQ2u:
%*:f<c:$#fqd]'VRWanjSs)^'Oj_D8L<ioB6>!"BdhQN0E]mAh>!d!28$2ePZU;.@op:pn$[5%oQkAI*sP:hr@1Id%N\:I<t2>`Za
%A`frDkuQNgrs7jCqU+&seb>>]?FL*T3T`s[A8cR?Hc<unYBWpd*&_#PKLZKf6,94[-/>a3F"Bdd1EATJ"+6-_U7P(2S+O0EAHc8j
%bb6Z`Y`[V]&/&*kp?U>6F8X:<p\t'AgjahGRNK(q\a]2qUXAE8%WpPJe(@*=KSGW"l<XAY:9AeBX;t;E]ildo>lV9/RP"-C&XJ6`
%&UZ4?W`dlp;':rs^$KR4dC+qont;;I(HY]NY[X`g)&1^uX4]@dhp(5.h.@c9EGCJEc3%K+2S.EITIk=r8_k*Xogig&p?1I.m7"8f
%ZF/:8'l,5Y*RQ!Y2\0'oD^t/1Hs^+Lo+Ub.Z0N6Q/;#!?d9+X?dtNLVjbih9RPdI'=1R-RY?'*[i*E1=Et+b]."aM?SSl&b'c8?Z
%Tnq2Ja'RWpMPr6bH^2>q2(`EH^tqHBZrJP`eZ9e<mAE8r\,Y]Iqp^GA\7tWD*B)oC<b0Ii.d\"C8a'%C:k/1eUFcU]q(HaF/-B[]
%.'=>Hm%m[^[QsLp<9>9!]be3NJiNrH9$MOi;N?m3bf]6`\,UNLc%A.r85AFBh0dGF8S7kh=:+iH4#u0BU#VE?[rA-IC8=@J,IJ_T
%&(G]nKX*FPoV%5GKSJj9O60SGDc*a<?Pn]!&2VrSF@8s[C3Zd;#ZeQ9Bo;NBrgeMBC$2MM3WmZ4NG0acUfc+*3h2WS*aK_LN'jPC
%n!KP9Cp\H4q6G:SgGj+`N:fmLkP8L^J>8=/kNfWrH&eB"@I-.XG3_S%5Q,qBYU7WgXc*$Up'_[JoDC^$SK)LH$uK?)[]_`Sp2QVh
%8)NW35][8)XD(r;r5C"M'?)_6CkbaY3oMm/$pJV]q2DLJRUW.r@ePFp<tWY3NK]_1Fh4ts=WY)13=,gB*\TEQm0qHk7,(bQ%VC*j
%OaIkFnlW!a'Hh302t="N>I>D-*RI@MX&ZRrAo/GJe'QYS1jKSQqEnK\7;Us0%9cctYkkX_fE7;Elo&()`[P-$N?O6%X_clB]o+"g
%.!AkXl8c"p5oTbl;&'&Ak)7Y*fg%A`)("c*PmqlATBcmt<uci9,-bB$%8O_.<o]T$OYp.DVfCo)gI:0o1_X3P(enA?FK-.:3'T,u
%hk$h:`CQMnAb3Q<)n4'_(#G)<E9tTk59EacC[EZ*m4h=-bm(-D/t05DkeO'H@0?C2l"X2XFue;n=2AJup8df;QKMX(>W1@:$2oM/
%B!#[C3c9##*FE>I9;$$q:YLU^[$dlR&7?I3n?4R2G"Sl?l.62`-QA<hSWU2dNOn$lS'd6><5O==MQI$J:^oo,+Ekas".b(,C)rdd
%0GeDu!/kGer>Q,S6sGcJDRCE9Te(>ADYLAFTQN#_Mam(+iu43:c.9B_BW"kHZl7O+NHXf+`iT[&0?.,>MX?5?38A$^]3"[5m[A6W
%CM[li$#D2',RIY0,>$87*(epH3cB,Hjk:R=-QBJIkKV";eVENQ]sD*@g2XIL!HLQj1Y.fTJ=VUqnYf%JA/gel@Sks-BIi]T_-ZPg
%OWeNH>>J`;[MhGZ`IPaK4U2EXQUUCo.\jM-XX[Uu=;rs.O<:b&#+G'Ah>^8$g[?&90qX#/m>(ujU4%#U0B/L]\;"aF1h%GEEuR$%
%nVT%q@Da&?.u&pLUo7)2a0f`l8u"5'B[I\TrLu`k2o=3u(7ec)LtggReSZ[8W9=RcdVjT/\LDuN1SLf4(cEkQ%,4bZ4Np6GI`Ig8
%i8SqnCe:ASH*:'`-&o3mMR*Eu)*]n([YV37n]f(b32O3#VCc[CMd>h=$O8a`3SVl-=kl/(a:QK6^._V-AN=*=%<Eua?pL/mB&$o`
%,BOErND\[d0Ze!/WW$\/V&-RVFtWsTZp3]7e*SqYU5Eh*+?ut,;lLd<g?4_T5%034$-hOS1HTi*#+HDJAJN*))7>ggg;A_8Xt@C7
%NZ4^$qnBdTXQ/$*afd#TmFm<u`&u[e1rEF*VV2Si5r=`,=W2X/,1n[9\>2?TN=g(;@d!SfP8PDS(e98Y,&Q?b8_1+X7Y&ho:l7/@
%ifee-,;H>Hk=dk;agm,-j4H4A9"+M?[oVf$'+r;>DGT%9Ne@NTjpS*X,duDD[AnB(6P.#g5*In)2uE*9N&6`@dfRbBqo[U(C?=me
%X[.F0dI'XiLa0es>WfQM8]hb%PmjUhN!^kB@,CCm5UZ0tAYkOR'`UM6()n-%r$1_pc$iWiR:6CcP]q/@S)F'%RsEa#LuIf_r*CK)
%?d2oS"]C_%2DQ"p[KCil@7[1179HnHLAYAtR.I-_F;uE:!(iSr1F%dnAZB49(GiInr8'(h-ni#4[;&:)7!A'+&.EfmOVa^M&=Mlf
%o`lK'_5NjdiIIr!9WrGiQZo`&KFJ_.Z5G?_g=;Lga[St^QEjM3m?*E#h]-NoMppsb*-X]^(>GUmIuX6!?*.I0P4h3QB#kf/_%%2(
%*^']W`rL/q*gi!*D4mO7:aX=uD2)rf.#,k(CHM]8F:Y4YJ=>N&#nllG:pUWS8:#LqDkZLEmPc*0dUg$nYN/"#A;5)GCE01:Pf7&^
%R;KLG[YcZ)4]!0`UBHHF;KH;XIjCCK=S'D43AG"tUW0ou$j3QujK_iOCD<g,4Z54`9C:`BXjG7<<G_m02'hfK.-L'D+RA4p/VRZ7
%fdN=5[]rF)=C+\0oaH;E:Y\Di%hS,):(0%>*o2s;ZMZJ4()p<\QCE[Q(I0H9:&Wma?]AFi1`5,9nGPD#F?-V_Vn!4&_KIZLT0$hK
%FSs#[+:`X8P#%$!6?e5T9:"]q`W-p^Ic,9]$hZ<&oUNqEp(17P49:LepWXF16K;<H4H=l7D=*WTnQ*u:,7frmECqN<B`F)&dF0i2
%7c_`aUnOtL97=rC=)'\?MVYu*Y=c#PN?7T);NHe3H4q!]U.M40Z6(DqqPs4+UBK=J6Cg"u`F\+"d_@1%9>gGTdr/WR>W2cV1<TD5
%e2mtXjfW;K(m7GGZ&/bC%PY1!j.a#[V$^`!b<Hu`R5'Opj(:$3(c'NU3prQt'K-od,NRnKiJl&C)pL2Zh>kmQ15kXYeF?ao_`9E&
%_8N=Cq!ep^_B>IfZ`9SQh!rt`Y34r`nL]ZV!"7*DK*S$@XM98]E38nDl)"@:@!Qgg]i2[N]kH2H=h(fFpi*9;b]`E\[kG2C^"&+O
%44!VkkGrr:*q!sRHR3"NVYf3OEL_BAe]Ij4?S#@S2qG]S+)e56[5o7t=*+VWfi["@e(1X-FuM'\]\2%AG:LX;eYg_cq/#c`7AR-#
%njho*k6hZur6nD"s5WFBo4`J!=)[MLEkBBJb9tWg]j;lNgjd*7U\=1?FH\qu?Co,F]?gFsrpJ%o0=d:Km(;5iRdF.jDQI1[^2C#q
%ZLoU@V1i5aEMn0oh$AHE^4R'AT7;:82esA?&$+l_Qeec:re^8ejSORWM<t2r=F^>>]gN!UmVI<`pst+j*rO7NQ?Ve6/pfhNkDknt
%2<5lD'[&Z'`rE==UpOEJh^iYN3i?cZ\HVlHPKh]Phk+_$4a^JdWq7>sHh[*fj]\W_]Y^;@:U\UD/nNYQ=t0#cp&=^9lF3,Ac.^&+
%LWf'4?[B8ris.f2J4CPo0/%2+L98/d\rgcm*nHrGh-XCFoe0+AS?I%[m9I919:fCjOoT&Bs0D5+36*+Apj:aFY?&,5MD3._s68P6
%;J!2S&*oC5O*_6R>J'4qhJY(C/s^P!ms\mCT(/rF[jUM1b+Dc"ftFQjn$C"8OS"Jp^5(2.RD!6O)T\pkRob['Z4bN.jZSNL]sjV@
%.BYl`gj/IiNSQ;di1%M+RQrg_g"fq(r:8oO@9ri=rdOa0CqmBbrEWm-+6bCKn-A:$ZY/#c2#mL5WC$7Vl2"TZa6RYQ2M2SD^4T-]
%G6=s*?Nrmm)@h<L5!?b`'h?'p4.H%E_/:sET0)BQqbbM,jF9;6T<Gp(\QpaM]YDS6hS*-BO["8[41QnbF,0K_qmdATUBorUf8o[a
%9BAt(+20u."^I5-gF',\Y!Qr2/_b`J-gbD"It#%9(+]X%`CE^qh-54ZB*g:[2qt7kah(:1_oond]7'M+=l"T->g/Ao<ne$pnF=qj
%c)1MXOIQ3ES#k5CP*:g&TUW>::OA"RI#VrG0ATY'CWEGI7*jLgF(=U5HT-0>ZJ1:XF'pm8f'D#hd(Y.:'@^_\ZdmhRX*R9bV6K`f
%ok<ZS*IZX*Zdp5]/+*%n<B5H<(5tY%,[e[L:@@a#&Mgi0r4RVRp/O#cqh#]M(6Glf*WN4UarPlagb3K7^[s)JlE"7C.b?ll9c>eu
%4.A,$oR2OcFn_JVg3dm\n*.V1TGn_<jWM<Z[8;FghQ3KXZ*!WJpW_oH#MYO%VkrfVlgC205?W&6&+F+H\'mIsWckC9W6XMNL\0!-
%h%q5?CR*ETF]d*_O&3pkT0.Ptl)!h@iX=s,)a7Q[Hb@fj/_>'ahd>MIW_XE='#FC](G'd9hn7TdGHtF(CjU(a5WA")XR.YA7p=Y?
%c.B>lJ?=9NM=:8pV5p4!F:ViSe;@-u5PY.q%s6p^LUj0`l`o.2:%8Cc_M8Uc\pU$m^&!!/J8PdTXrEmKSF?ag>C/S18Db3Rpd+mA
%p[DDEQ>feOS3FN*.0oqXgo/$:EmFqReKTMQY53;_j6Mb7>MX"20:e?!![HU8LF)rYrf^tjR4UVI*A;7d[]7k:AL-[R2EAmoHM(aX
%YeKKg&t]MG/flr^qigu<L!A=E.uX#l3F&Lu0A)&&BB.h$$9rq.nHf/@$W?rqRJl'hr>bh/go?kZSo],On:X!:s!'0\'n<L.`Qf';
%KA\?O$[g&GK\n%fhhmm9>Ai9S@30D!iE,%!?Y]XG0!OA!HAI'a!A*-:aNi@C%_hX[P:S;'@FqQ9j_YL=J[+U7+F$VR%"=AqL]PY,
%*Uc.<,<o:64P2p3cU<PEm?tbEW/a:W_5HUn$$:e/StfJ=Y5)Jm8/;2D:9^3t,ijsKL7WjC=F`\eOSr[E3Gc?Z4WK,[$5g;sRc&XI
%T*]=c2t#"mV1X;>cZEOif9-^/+X];Zqo>kK_]H`U`A`CPX[>#RLS)IM]]eD-dq@Y3M&u.>n_M*eM&(XCqM#W<1VG/"Q*Q&F'.?5r
%"Tj3;HIXZsa4Lk#,"W-;:a"12QRFeEDWKEg-j:+.:5e&Zk5g1:OB1QLa*T5'L4/`C?&DZR9oPmkiJ1>-/6lAI)Bh&ZEl&]Vdh7K'
%[FRmY5XI@Z&Ld9-q73.Y&6VTe_!E$2U;j!rg]%`)">.u`QRG[]'Fncl0`$il_Y$/22?L;X>`!tN6C_!YMsXZ>-F4$`%647])iDNm
%fL*JB_-o>_HQ1s#HMXV+(Y",oKG"ti`%s+fcl8O'aMVFQ0#^`R1s+gB:sPm?#8/kB"`O.YVPt)&$gHb58fOfaM<P]O&pOX^Q2"?p
%JOcn'H^?mNh;sDDp1<TFppil^kksETR)#n/"$9]SjP?j@?m/T5$Tk7/&agi!%&i$PL%W;spZ1kaRWWl<anE=W0D&;WHp9H5d.&f+
%QU/[;Cb"3WBk)^VnAOfBM%BU9X%i:!9[lS)j1IV?7LY3YIG-44m&U":L#:<SdM(TdGg2Qjhd0VMGOhr/s)cJ&2GYj6UW2iYgi7PI
%^AVS\A[29a)K\p1n/#9^$T`SJ3fLA"h9RH5EsGp=LOg%>n)Fk%c"J[%dqT^fI'*&789b8E?6838[NC![_i]"II,3&\HN3,k)Va##
%X.@O%V6*G@4gkZ_`KtE!l"&g:*OKVa$U1PfK@i/5qmGuEJ,Z<d]M^oj$rX\8F%c?62SK!5^j-Rt<1j2VaEc6d.Z'@/JIf;D6N5%&
%e#hmG[^('_?ap)/r%S5D4St/^P96'Z35FY&OAe(3EU@NUg[Fo'cqRD>kU(b?R%%WhOS4=ZiujBP/:Xr&kdg'=NW&3*fTQON[k=;#
%gfg[@Hb-6>$i#BM@E>H4kNN<h5dh7#msU]fHm,?eHF<3McsoiY^(O7P,gljJDPCIaK4e*A_kh>IU@p53<r-):@nQ^#b,[*:WViR]
%rUcMMhtb@>2m49>;q,N'a4VQQqrZ2!06(<`me-IHr;#(p6>OJV:u7L2;0^^&)u<HbI9V2?-,+rR1V1MLiS2u)pBoZ7hKQQhf0(8Y
%lV$tR5'srLpN#lMi<E-MZ2RqG-$gXLEc58+^FS@eQ1YBUbVpVG.*u&/ZU8NseQFEpm0CNTo[D@(XiiAA<hDM/3Bbp`oed+uR!lAf
%[JpC-OMg[/nZH>_khG57I<nD2TER@^@9BSlHHj=/ju)`-e*ooQFh1Uke6q_i]@JLBQ$r8bq7GW^h89QV=F9`2/pP$qGP^R@h(s8f
%;uQf=o<_4NhVRe?H$HpQUD4KUF8<ZDb>(jW[/U@&.s(k4DJe@.Z[LOOB,bW)+(gKL+*D@Cf?S_u5B8,iM]Zp`=PmGe=bSLJ2N6k=
%EhKH<K.h\Uco`DIQV#OV=N2[;FP)eZA38Q]a"1`CEY%_R:?=H?`^8@sY%2#r\<8L/(EOUJed?]s'7KH<j4D=KPTtbn)!b/k#m9Xf
%Z'%'?:+nIt?hX'DU[muqlK]Nn_4GedmM6^F._#d/\D6r6XQESJXDMX:5/b==/!lN>hiXr[28Gd\;l*7H5BUu;Vjm@3B5X=no%MbZ
%kh2SYf12D!-]crk&Ut4c&#G-=^\?3pE;/YpT@L@@(M=O'WuhZV"ua"<aIn08-FWF:V2sts5]1E#Wh$Q-?#mP'R);^8q+Bs\:Dar8
%hO[h.#c@E!-i8,*+n0]`]bB&rT&8Eh[2NEDk9p)smA8ro0B[665&ZbtCQA\$-l$"#=L\G"lJL]oQ.PJF-[QfB(k#9:2)>+&`JsSs
%hod#]XaFEVIe1ininlsY9cgi*4^A)^fm=,cbEo\le$[Aa_-ZB4T66O`M`]"eT?g/qn2$T??HtWJ?"D'8G=r8I1[Uags1)B:D#01s
%4s4Kb]/2nem'et6f?9Yk\ofXfk4R7Pp2'E[j2P9G-W/l&;pgVPDjl_W2d%`!c[H?\OmD/YEo-@O4Y1DLfN%>b?R2*un"+1>V4Z:t
%eUoe<,sb/V6tAk/[QH-ip^E'.^RmSKg%[QM+L7J`SZV2+rQ`Dt@A1c6ZO]-%YIE@O%kL3s(@0N!kPT5^k]#!r:V2bBs*!i@lm1/O
%_W&c%HiApVKs%_AK5gS6/;W%2[eB!8mQ>u=n#O?->M1U4PH'ZgfZl!A'YMcXO7"ZkU6)QsT<3KUocLW`JU&URmN36?ml`p3)Mie3
%Ac(5CDFjt/UQ"*pDP(c0?<l<9@Xl[oS34=1-SNei"2&t1`hm9V:F_EURWmjH6NlMi]u!h</!uA:],qCUV%YeDHHPdS=1R^^*;>LH
%I-:B=*Q[$CigL-O*EqFQ:de[Ud;ia],V[uEg>GF`^Y2e>ep>)6CKM*VE)\a!*d1n.3Zmh)IIZrfo.Z2*784l7b5U]o[$^ft=hEC9
%%DKr-dp.E>UP\m.98qIT^bW@eJc"rY%hYlUn'5_(efK6%m,hW&,\;VM:LCdfkKA!tWGcU2T_&bt/jaD+<H@^.V/%X8i$_([hC#Lr
%5D2f'?e4d\O/iZfhY6_i+]iI7'iEcf\In"gX09!5^>rY7>$mBr*.;n@>hCCdMhT^:d9So3mh]CW3*BZc$b9o>Cn]sJe#6_m+ejs2
%LQ?sO?]S$gB(N3LmqrRcU\1J?iQ&fieNJVCDk%R14C05ikJ"oRp_6bjr>c[6F"an:K^\MWnW@oYq$I(u&*,Va@MIs.@<&cJo.Rkk
%^/rAtmN35\=q9bapQ^XGHh3F7/kT[n8V%@G06&h:j2^o&Eq&82`qj`L;+rq$jM;>G]Y?^qD*,>WmTnqE`QbmHMk.2XW)-%B.B]Ji
%l7@>ro)O\nq;[QSNqYHrU[o.M,GHS-^+?$hr@6F34ErD^X$E?T=7*ed*O48oUd$h.pacn3E5$#"GeEVO*KPoFY9(d0<R5@9h(*jV
%&_OTH9GDXEau8tbfn7Ij6[56.V.S]VUEp,AOg>%Z`^WZBTrqDndQ;TQaBlUJG7+5a(!gT&D<YqsWup0<>NPInii=*WS7WqJDnb#E
%%r/tk4_pT]T9?Ll(Rt*0h@IMSg3D"C9/54?6oXT%ocdaiF)[L.m_,Go$cHoFGO*chCgrlVF:(ZB2-0Ld^YfX3$4^+gO1+c*HhZO_
%>T4TQhcqUIT/Bt,&$u_q:"]+!_>CFj`UCE_2sX6\`9c0.61XsH#FOqZOd7\O.U7DS9nZd,@*VPV/mga?#o<@)CI=<bBKuDkGgL5+
%2P&\O3$[@C)m6ed;IB&]SS#?HRm2?ADWH#bDm1jDroN-K!Ddraj]P]g<ic[eBtO7MpQ"Z&eumhe1N&J3gV-`Yl!)<DH$id^%D>cA
%'2pp+lufGdcTCH4.g+"]d`Le?DeHc#pM[F!P%Fru!hW/#H<Su1^BWMM'ebu[?sS28mGc#mrqo(J*p^Q*4tW;UZ7AC'eSe(s0I*./
%I.c6X@m&[q1,q5dUP94IJlBlR%j*]Xo)9@b*]\/:e&BN:Yk<0t+#Z0@52=DtHMR5H^9[b*DVq7<G@8`\Dh082ZGKYg%NZnoXu)fc
%qr!"<GYpHfIU+RB4KP(FT.u'IRW]SZ@CP)q^@\)9V4F/QhT;,OZ]j2Ar.Y$@)JZQSK+41fJa/D%923U<Qk=>D\omgorF[9t\C"L9
%n+<(ITgZnL')s@eg+$Fj+'2N9I,3Y^Ck"M'h*r"'+\gAL(tS\+!Oo+=c<JTN`PBTU<+=2+i?s*FrP_APhogl*ei-uk4C$/J)S(:K
%;,86M?EL=_/"<@GT87VrJA+,5SWq%aPWl`umV]Us$7jlmebk,p3n:,UpCs)3qqgIqRX<rFZ_*;]6J2o))s$YR_tC_1V6?A4i9R`k
%T'Qf5_1qla$K$7/14T"kEWjSRfo)D^VlfDS@0Xng#jYL5LtH9<E:GAjo]<qQepd5M3S6aG6".P)\S:p;D\fr5<U9#=@<i$Bm+\AR
%!a,ZpqT[DcroK\l/)%Le]-ht"o/nBYM8I+N?QFm6=*X6!U6.ZYIXNCA9sK7fV>3&5$n7h8oWkT;\Q>CEH$ple8Ic9?9>.sp]Rq$o
%M/P&\>Uu<s]j'mi0L0`ch2L^\-C4+)(RKi2Gbd"(M8dkO41XM"c3bo'*9=k85Me3Y.o6DM08o;m6i-\Mm5JDimh[&5//2FKIM;KN
%i'G&kT?Y,uEmHVTY''2OQd1o>kg_dsYkm/\3;]Ue`NAk<aM7;*[;X7%grU<r"jaOa?MMYuk&TOO\On"bTL<<Dk12HA^:rFaNSP82
%s*F4#k)O3r.iKAjNPdM&`9KApgh3@!(EVr0[DL.gm%"AFk&N0LZ?j>^Q9ThmgNSrB="YHRidLjdI2g3'!pe6NP-+#?cO[LW4>-TV
%>PFI'@`ruaCcs-'0@]HB1[t*S#K*YO`;[MarsgZ0;CjPf3=qO03gmXZA(lG(D_P&X\5@&OUeP=dkeM>^<j<6AYQ(.S;q8lfXjbO\
%R_@WONP;7#gUPDa]/&OA<:3t!J^=FlN6K@3FT\)TbKO(5LHFHh0s"R+Pi!ClG\J@\^I!0Mr2[-\X*(JF=sZ+(e;K9"QE/Pr/"!4P
%\WrE6bn*D%d)6<Lh.BL21Z1liTuNiu"7PM+i6+5B62riLpCU!SnqeZe?=^pf\Xt%pb>?fE?X/9PSc/FmMkY?K4Nd"J`8gt3EAc/$
%mcIr`Aa<9./SEBjL$!<+U3/HB;ga3h49kK;mskA<-iQms\X%\V.dM%_ELsG@(1Y:,i!8O,^;Y)b=dQ^[&-$\4E/TPp/FGO`4fZHH
%92XTD=kg3pbVJ\oc!#?:^5d0tB-#U3"l.CDMpi*uIYtnmN^Wrn*L:9\AI?^jGa&TG.mS*Q!Id4kH](F[mJ=O?K:A@@&kq@`Z`cdC
%U('d.s3'UJU>IuFX;'Ckr6B?/ZX)Xkj#_qkP*#kJeFgA3!"*5/pk,\OCEo&);dXr@;>eg^,5e01efq>+pI=Xl#]jJFVp.%j.!>&g
%0Z%)[+\)gIW%I'AABlMsbR]?]_K,Uno-2V:AaV]n]+JrREA=%8Z1q8[Q<_7/c<Xc_&'1$tHRNkD0G!9fZ7QHp8TDT+&$?[)2dF8*
%Jl<c%!(49>Z9Im#YV]Z?LU1mo^E@5+&7FI$F;Et%b[pPO^..:qP*:M_#_!Z`Hb^GY'*#F/D&=ATn;l]J52Y92TDh-*0s$=mP/BDK
%Mj;Cha$U&ODG,+A-tkYhbRYQV1D9\[\-?2W/>9KicVb6XW;"1ma2q4kq2/t'"W(8BgpETQ4UC[.ce=\e=W'X\=Vbmt2k"d-cFOM,
%5N)9-f(S#(0mK']7[]<V%i-4M__f3"B=XdN1=:@AF9?.f\43+e$MeP6J9j+INGCV-*1/dBqGD-]^h\3S_&rcK8sS.dL-QEqMo$5*
%e@>apW\&n]"u10rb%tIYJ63S,4YC'QFMoP#8JmZg^Z$,%S1g.Y%h`[j(?(Yl;F6cb@@D+G4j-kMB&[f<&iGk_n>FR=)i,>`%>htl
%JpRjNWmqB%2"6k>)Efbp>V/JNgs+jH.,cKc2f!Ct#*-c'B@KXTQO?I,[\trp*+/1&W'>82H'S\mb?*[:6=%rB>j4$H#A@:KN>I.]
%gaVh%FK$cY7uRb'["tK1_ncN7.iQ2Mf>:t3@GZE&lY6M4"e*+A\AFk!bqA@jY0Fm+8mj1.H9h[l*e/8o4eDou-6-*SRa2P+m=FBX
%dKj+<:S26b"cXq3.M+tO\6+u-%b?s/7;.E)V`rS:Km4S%$`9C4JSY1_l[bPlaUHauc]h;KD(!1P1dYH*7_%Qqp-Q<Q&/,N*Z<"3C
%7*qjWXICV4k%?tQ#VV:M@%&l__)UXj\\e>f]W?$c7;0OUG__SoQ\ib;a^QuDKg0^/h*AJ0!WBff%V=kCX&+M*muoc'>XL@6H^]<q
%%df[Zb]j5Nb>DVl&\,iQ3kK9GnT!2Q4m".1+J,bpAe&DlPtR1c/?CP5,Rq9LB5LD/o3gR/9pk1).L(Cf8t1/M<-"OK:b+H3(!SRn
%nM2h"fT9pOZqWM^BLH(8"s*u7*mn^Q#(PnpK;[mWC.&aNVP)SJ_-s44U6lK4>X:?3@.8#\[:';"(bU^P<+A[M;(,6;pGIe'cu,2^
%0)1%Bf%-=0Mj`&pYY2UB@[@*#-/jES-3FDu*cr3h-s3104@;.M0PiFj`\!\?Foa)IGDY*-oO(+\bpG>N;KBPgJQ9]YpqhY*"*5-)
%ThN=#ft39-:]h3Em;aO"]akW+FH8rN$GRRc%Vsj%%l#ct*Liuj%BLeNLHo@%^Eebb#7P"7j73E0p;'AjPp(#(!AB@6/.,JRe!AIP
%luaAh^uPh+2,#u.$QA]%kNY3i0J/t&gk!GF9l1OQfM8U07,\K$lJ26\V-to5-7J'"M"8?eVR?uoq.fL[_6>hcbp.!><$J54;oYM,
%SPqHX"+_*VI9VCHR*E^&[nb:UFh@`nS^8qLJZ!#9JC]CX-sY_+I<,N-g;d\cN&Xp!<ZZq-31$,(KdUG8I>2\LA%@o&/]8l#5Cn"p
%K0OdQEEs5b72GC^7Sg9B'g4f2@3h4M"idd#DsO'qJ]'mWl9sSDH0Y#?Shs,r_`^*6?oXEK"cClm)f@@"9(.;il]"bs*!7t!D+EOl
%IHi)15Nk-r7VC*j<(B?d@9T$0+X<+-dCRYWK2piFEB!F?YY/ZQ0*Zq&1^ARdmK5JPG+$/oEN!3KJ\u:hSLh:rqBX!E_Qn@C#XjfQ
%:2^s`_mq&,Y>hn3FusAcF_p$q8`&;(h"/qgNs+'RmN&^qa5Tm_k-tBiQ_.E.Pkjg_s6&65NIHrhDBieAcuEGSa\;cB2:t52EkhoK
%!&C<kS->2[&I'XNoA@sYVU4,h[HYVd3_54G5*Ct*OW7gAKu_C3iulNQ]-e*;N__bfLG1(kJ(dT.6#qcI%9Nk<j3dsG;%'K7S;KUM
%olDjR/$\kJk16X\LVsHnIDd$4_;L>0hkjm#)Cq-&)`J8JpDqb'SG\\C%H1b)p<h*QNk>oNlWHN(_tUQhKlGrC5Y@;)lru*r7rk_?
%D`Z.fJD1Qi\[%H/d-hEUL>:Es"1qJk`m>#5\mle;2!K#=;;n3W#(oFR9cq580C-7HFN)0c^^)8^'X$q$oeHR6%og)1VSh11:S1]d
%%t:4hGsUbW]:*(2*/#4gbJ8uDn,RqUoqQJ[5BV%pk'4Ba'*r$YTE3:qp]86r#>Lb38O0T_[kTY4:YH4>?s[$*jr"#qbK(.0CuLWU
%"FYNC;IH__fH>k$=uP?DI]5L[0_*f*l67Dei(mWH*/<iL![2-b*U%!\,a?KWMR5)qis$>kE-)B56j$1o&3G_7T/t(HccS$n9X+1u
%eZ7&IN@4IP1dFcW@ZCJd*2Ld.Y#:(p_X'K?!`mB@?P,6RC;;@,M+ii'G`$8#TIS9>%ciL)0]uV.)K8X`<(BXk4>*KiGYtufT=U-"
%lp5,WahPeGXUG'.M`E?p`rorh`kYi?1:?7mLM.E:i,N=gD$7$2V_0C,UH0jK\sCU9WY7@f&(aN0bBg<1UH.im3J]dedAJT?T[-l*
%i9-#;W=pEl'qQ-c\J]A]d1>r(&;pp#7::NQ,#;K(DO:q?'.O[tRRpPaal"nELn:7PKrNVuE?Ui]ADIc;s"kc9Hsoh>1,8Q&(Cq@U
%9:;j#A/!Q("GEM3WHJR7B:3.Lf:4NelXJLAP3i$rknQXZ\qo-,J%uJ=9WCGboBNaJja\Tf.bK?`@T79P#e-TMJps[o#rBs_E*Qng
%$@D(/iPQ.=M,PU#hH=g/H'"h11Z<QRN5Ii\ceV:)K4!0^#R2=W(7*g1A+6BK+?-btckL&#,$j8b4pZAK6cGN(#Y3^GO6@"^!tIKE
%#@&Ss$W@6,-sY_,SS>i_&rqbDQEioHS)q)TEsCt^HmVmSMuKm)cSa\Fn*6)k'+^JIqEdRYqU@NJPAERC+\6%mJ]tX>nVC*DqM2B7
%!767SF"s3oB&Fi"btOjNKg0\hAGBcr[Xq!oXrkVM+AYK.$of:HBqrrFnU-Eh/*[d_r2J.]\7`=&\mEn\K7/@VqhY=iWQ0>]6So3)
%_XIh5@8D;Ggns[UK/@OiL"^Y>5VP1LpWuSna]^tCRYcgZKbu0E=85^\'#Q^s#8[#sM"?DT"$58\nGP%dJ9t-8NtU6"h'cO%:S2/+
%%hkh8+2k[p"8!1:MXqs;^k@?:iNr%!Qc:6_Xf*%eC](08NLSS$3;puc"6jH%OheQ;M.8&[T=asjMZL9V(bF/i!?,&kNqNZdd&/K>
%G\M^&SK$+Ec6L%lQ,=!4=/[;F3*n4\ogQ=i%EK2biXrD7.[>#e28P3cHB5Q-ND`IL#"(X)1(fi))h<Q-^f)pu.>;I)(9+,T7T&fW
%;iCr%e.N];W,WFsNe8`9jst)njZ4r&^hlb)f$Oj=O!Bjb,B/?$Fda2>(.pS5:6sr5m^f]15QeO]N.h"]<>3/bY]b+ZbJZb5Q9?.?
%/,Z@s^7-3.&kmb>LLXZAo6!==4FG'L<#tcliGR6:R#V7eGaM/KN5-2-e-.-<'-7X=QTRXhE.*($n+%g\c!$e8#AHQ8&`\i0:RU?0
%P^C@u7WRQQ'_%##O>t'J%NGQU94"\"CKmF10[(M[RCimnA=:/o"0*X4K'S\aaiM2k;B4]cO6#@YA7(`mGnfmAP\6S?mQ=Q5M!*k2
%hSc*`Rq9@,HY!b@?8u#Q!">H,L]aH<7<mA/_`47+@8E:k\!;1Q-T(Kn$daEV,6Q5M4,0H6692I:)CGDjg'B(iG6Db"+62jOk1;G#
%?SUNea@l%UC-B*g%Bp@)TreBU*"tt]cW(Q::S7G"E4g&.\2m`O_7k-J\Q:J?Gd1@W0>kLa;^D.B_H^AJa:C3Z"-/)J'\GeUc!==P
%-k?2T0,)]q_A&59X;Q#R-cOFQ6DZ9W+>E1#ot_M@\[7n'n2OejWdAT&psZYe).(FoAVgr1?&\#XP%L/:!K/7`$0+cGZN97)>:&E[
%GVC@<=k%Hd;jWX(2[R_XB=M&CAIXhTN8]1@42NV)2'cEJ&KPQRGU*VskYmfZ="JW:'oCu,H;?SnbRl;!3YN>-+$JX-S;CI=8jZ36
%/?:;``M$(uA0uoi6EteiRoHpp+>)MB;jf=tfjj<[^CP49jX'fnfU*0.7c=](lAOZARgl;&EUG*YM*7`;=d\ESVs4b"*B5*RaUjJd
%i*;O=@,_3<+H@CpC](.>MM"!H_poZu51/Wq*+PHL[0Aa#"Vh32ZCnK(\$bo<nM"Xn<IcP/J*MW+45,nY@;L%h_4h^2cQgSrj"[]C
%<[J_IpnE3O0%$RL+>u]O>YbYX(frOd12&h!0&$U9,miS(i#s/%Pq<%N/;cZ7!P+$nL/CK3<_^I3S8Be&%M,ak)+"@bKXadeDur"&
%j!pas%hBFhL]K$uWJcSm@E*tu`oQF/Ag%NH$8?9/7,Rh/K;6nmNjnoT^a][CZRGh&7H=Y6"K'NZCYZBIG`eT'd9V^9abi8G6[MgM
%[/qt@H1?3:7C=ucT^dCO7$)ZrhuJ,Xo"cns+^A6DCg+Qa5f7tCV^(aP#=e)9-0#1Lb<X_&Eppp+Jt]#9[,USQ/g!#17PH-JaP13L
%F2V-?,E/>L-F8JXDG_WgD\*D),]I`t4Q+b2D7.CA:Ru47Q[f5pNaXlHj9=mP-"".s;m@)5QLK3cr\<Bqp$.fSiW5h*f"6/8rmY(n
%"8r>VN/L8e83Y(m.Z*p)4r4(FAuc6Yr"H*`A`*TEfi;[GEVS!`6)K_*iJ!)d",KJ.HGWCdMr%:[e&+daSuOOa`L]-(L4=s/!uAk8
%pj\Ys7dS29HQ5F\'r^E8,D+Zn'X$r'^*IUHrr[8F(leBA*"t-95A.d&/G38]@iKYt/GNaGi<k)"Jn"RhQtW;D0hqZYb]nn`*=`GT
%5E=k)F_&k;j(=.NSJd2IFdd.U9M$0AF1iTkI9qYnJ@-io]9`0569)J9PQmg9!tU9PpA\XlVnP-.@^"32O`+iNXR!$u$V^/(o%G^@
%r-f2=2W5'oeFmX5#4'(:&ZA$f\p/0V:lpr3o\!)Ikr^-tEhO3B4pt>`#(mr82.9`101fS]Y%tfXYbt7$O#kb=2m=_HA!I64BKIQA
%@A>"kHEirYYbgt,X$/X"Cg3OC`SaO]Ao;%K\29O(/4H@*"r@YKMXiVf9-$Iq_<n>cWVW\>)UCp+>4%e6f[D170sG,4:kdH/p">EW
%1='f[:',$ghVAT"Af1Aj`>X!VXDT&24a!<>o@$5)L+chQXG]YMqM]^Bk[McUM&nii#-X&<)JJV<Pbmbu)"ae#M(p>.;IQVPTdFWj
%aIfjb1kSM4dib_.i^*<q==aO*pf"'c&*7,kAD"=D.lu_8-]8041*,<oiM>3okVq"R*/nm\i``86Gg-kf+ihIHg+n^V5E_/XOEtIN
%`R&SR\'@=3J\;$sTkb^fZ>p4d@^2iUZJSHk$E9^7>26oPIU3$l077hbOB6i]N9<b`p69iF>Idfi;H"[J!(/^NV@[%Yk;k@Y]uM!6
%p$d[:lfs6bXsIYsGSl3a1q0>+m0]V$Q@+f#9n1$eKEZ<:b\#ba2?*,L\VoT,.!dG=l14qcHq/eP_tP#GHaibk)Q.hl=^8]36tkD>
%*Zqk!.jD^/=_VNVe_^VO'0Mg]AthT_L:^<m6D+)e\Nu65<p+HSq5b4LEb,.l\$.isUJ%$JYmXo+:tNnfn;++(:)'l#Vp;H7>1VIA
%(]!.(9WHBBKP<"'HQF,:)TiJ")B>KVK\$fiC\4UtlinZrJ=jg!"XYeQJLP;r>D-BI,f(3H2J=TCaFmdmOH$/+ahU9KP,6=^N5M8K
%]5F@YCiM]cl+toFU>HsAQ#Fi&F%S]Kq>((GKG3=j8EZi\%g\iV^N&Jdp=hQLYir=<&iQ=YBaM%Q+ilXV9s^Fo6-okW9#Qb8)`Q.%
%9?bPdNBs1#`Sb38l2Y!k0&@GsH8f++%b?D5EJm"?_$UqR%Z>mnAuRuDM8PrHbogo40;D>P:V]+3U"RD_i08HB7l+bUBglFhTpWqm
%U2YfNF[^8UXk?$DQ-Ki)H&8g7?]h*YKO$4E,%oTF(9I&ab>hdNqW%(C/gBGFYeYi\+uEdNYHB8*#KO=3o^sLD%i/\Pn`r14P=.4I
%pp)A+B[VY"GMMkc1lLO/BnSAsin%&36D$<\pkXfRA;sO3<D_B[l[7HYIS._&R3p1/A*JE2"c?UGJbC_D)ak,6e2>(%X\KgR7<;6F
%7QOM^^VWEF"a/ISl'Qes2rUEQF@JY?*kZ4R7)94Yl9)\8)26AK/.%%Y?4KtL':a;Mp#Zj&*]DK)+b7-f#2L!G6j!5%@PMhU4S;,H
%-4ck64Lj!4'G_?Ykob3e9(*)kQt4%\:^2W1"l+L&D5\lVe-Q<[B9k-EpR%Z=7J/!P@H"2O!I&LtA&124ckm([1$DQ6fYuSP,!?PH
%$"M6J6&Ld+=*mC`greo[OUWiW?6%HAAe]OUo\(-><b[-[n5.V*`]PB)`mDoF'@bSuL^(1[*F4=F#(>bTn&DsB_,nS:G)r'!QL@4d
%k)3F"IY;@$+6VCPeJR6'=V;\la5BaaBfE"G?st?GEGZEUoNHQ4&W5_(aNDJ"k.[u9@)+A,?)</h-6>i[26ZQ\i(onL2j^dWn%`s3
%`4)L('+'M=KP+ER88#5sBS]3BpEOX25'9:^;,bOCp,;'TW!hBKPdJlXc!V1oh2_P2ZBj[-(Y]$Kcs@MIMa<uHOPD79`IWE!.Z!1d
%?)$Td(i^Bq\jSXJ-JU"ldYA'M'=4HQKg0\d_'6RWajQo.]i*<Qd#W0Xc!`/,Y%]fQ+>%#HcG5(Q'^@Y(%Y*b!EYH,*::]]L!E=_V
%R),Q#[.hJC.\QLu9f+'T'8cKuoVi4S6aGL0"eh<MV4?j?+l3tLg5]Tu@S\Y7&.TsfqE]Zr4F$.i$F%P/:Ru*Z@+Y.+?Ggi/Wa5fn
%pIU&0Q:3N;gErUuV;VjO4K&SmI<_t79jl(4nYa)LDS3Sj4]GG2S`?t,d7aWIh2uV,0taKf/N=Cr1kPjbBL!Uia71BnNBVJFTm2eM
%CYXbCUrqFY(X/b^XLF,26.:R-+q&4=1:2Y;:P_J.3XLYY2>YhAjE>Vm_jA6jZW*fbAG@4T+4ZpLl5Uca(ha3Ma`29R5(*IJZOPnD
%Td=*(6qITZk<q71e<)$/(.'hp3q[/#Y0j."+?,1+Z)hk:Q%3T&[]MoN8@6%bKV:_6LQkLmB)LqUZAAg-20<Ld#(Pn^Jn9>*IH66/
%aP9TY8?bNbg4V<!'Ql;CcB'juI-&S/5S`_:`T&9M90O\E#jpl-8a;M<2re<qbG[5WJOR_6e.)S?Ml3R+$<QH?(CotkZe.f&qLJrr
%g*71_(F,I.rJ0lM6,S6XO3oY)*oI&(NY*=d/,ZA>aGgW@/7=6a?HF1Fe$*YVKB<:l#;:c7DO^aJGA1#j;\K[R=Za>>JSY1_1[QN7
%/fZECBn-Ro;RIju>I@I&CQ+cF3\/:)$g1:Ledr:JSeD9Cm&@0<HoP"DZVcY=eO$r"A).u[aYuY:YirKkC;Q[XX^d>;*c\g7M8C#,
%Zt[Nr3#D2)@8*$qBG746nBH(0Q".c\['c!bE6N^jqAn)t%k:7GBAgef:S27g+4QAh^&kI/fql">!J51aI`gLigraZtq-Auu`erqS
%">"PjXo`LB2t8aCH0N/c.OVrj(:okf0;Eo>$VP,sRUG@&eKJK;%F#+!:GLL#BA)a=52]h1GneLoTatNi<C`@""A@P.c"]n@od1[=
%KK<(Aic/DOkS('8r2I$f"rdtq34:;2!(I0o2^]54nLt,=-c_TnHrrhf"RO#.#+b(u^_QjU<KA$J_WRmLIF_dqbs^56,9K[u_0OQa
%Z1R"Kp`pH4_A3("Bf;\hips38P;8nF_C5(%o??ap<1Weq7`W=7Vn0NY%0"bC`N;VSnGGh4OGrB?a/@4)UsT0P0ans6*HT#X-dcUr
%7\@8^QshR?Aoj_E1X(KIqX>pBRUOpGV:C6U#'8n5+W>tsI?K5Q-="P)NPkUC/&AJ-P8/4'`4HsNbk]V1R!=4>8)P;8l:^.a/dX.W
%?O;>IX/e?"cEPe;jS0FS(Z[q#E7d[K&XM$^Cj^QNNdql<eE$emT#>d%Z3H;d[R_2T/:BDXgRAh("72cPW?NAbMpIYF\ZTGZqm!%o
%0ujMs6j5d0j9a9_BhX1-LfS'O2Kp5[W:;b#5_BA[[Z7`8TMM+hcc6F'<6$)r)O;XYkpBQp!5ip6def[D-Wo\%9rEh<Ur9Jc>iAJL
%Alt*8Eu]>^iRs7JhN/itW.O-p;*CNu*4@KTme6qU3*ARIA]?_-WRGYsfXrd2hD`Z2VlF!0SB:?`.p3SPQ0KL#!OhJ)Ra,S'd(hL(
%Vmtd6Vlo?('_KG`)D74K0G:;P%8j4Gb%5$(lub4__-RqnYoo?-=YfK>#sa,q_^PN6q/q>'&[\9"4Lmd<;!'fiQO_l'Hq>4"Ttm'Q
%iHP`4+.&C?6ns0Q$<R#O?;[;JAJV+#B3;mg$NkPnQaF<_U-9(hFrKf,lgm^_qXB"?_=W(r1&04pff\$+HARrami(+gna]Ms,3TU&
%j,3mihN["N4@B\Ki1hROBSsWu3mG\?*$J`b>>-6H*Ouj#<08:\g4Y@s-X%7<GV%WUB_;3uj%iqqgd]p+9E8N"@[\LkqD0sL$,5h;
%l,Z-j[X<JC9uj1@/9jnGZ_MJn4a!(hB%W,PeLYtgLuEYaT*o(]5V?Oq"@Lf;!7?<!WuPD0TaqZ7h:0_Q%0"aZF^s[QMRC1j*Q2*8
%X&La`gn(Cn%o1ad0X0!Wf/cVW=L:p?/;h?:3m2t2.#cahA@A_Pk,`\Aa-%G-D,f/RFNO5?3(KO:Ur^=rY!oZF>iSVN<AuUAn;(?c
%/O:o<o$ut53c;1M4CocoC,gMXNbn?1Cu*$^n%J$8:^m?Q[l580on<!B/ZPR2\.r6=NY3+UUQ2TJ/%C4\IX'I9j2$'f_%B<KrmXBt
%joJ?rI[<hLLrpb7Yf/n:'2SqQ7.:$SPXoAu2i'iV.OS*'_OWa*IWojcG)iK%3L@6$n-X!.2(XmPT_Gkp/h!VYfP7(qb]Qp.3X0rr
%I(J!^'Qn9'lX9"`)haef.\C1fdp6SMIGKFcBQ3ga\W]L8m=VL@./MFN%sP?4Q_cG,?8\%)P1g]7<F)2k=W1rp"-+2"(_9Ch"$G4B
%LK%dQVbXS>5.?>gLb.\fBst:bKW536$<&=NRrH#QWFP5qO/!f6YarQbNoEi_;;Bs^F0c@?2QVTMm^dWF-ieAqK@f;Q5Ti`[K,lmI
%(]b[o%u(Q3KEq9NBA-&i.POT<f0p$sZhgJLB4X1k4O`HVqZ$g;Zn'ZuSL,*[9A@D#(&$.FF`VcW""R*s531^4O\VLPZPFkX*^AKl
%dB8*.#7&H'hNj#=2'-Ci_4SFk_U(-kWeK^I#KtbGQEF7_Jl%I.`toA?gHd/)bb_'hE/?c$MSZR(\A"HX!\G$):uTB2Qg;h)i;o4B
%=0L)b%4&G7oW_^*GNt+G"pJco;?,*G()Or:F-9O:f_bMf$el!5p^B.Y8,<O<JOa<`@Ods%U`"qPFa!_TM<e"TcS"=qLQ+1eS03:@
%0j1Of2K[-nH"[E7`k](+gb[@9-!+Xja.Z;";`FHBZp066DF^<6(ki,YG7^p@5#"#67Ks`5)@KliU&#O/"F'.t]"q,_#5`A/!HBse
%E'3qc$gcQjeqT+i#GDS;,XX](<!eK"2?)+Yop`*25*X&e=Mhr),]88iA0"iDpkt8u"tX7SW6VS*nA$qPJtQK[rmY(no@a:KTNf-Q
%N`YOpI=u048+bm(NP.Wf$]^)#r!Y^7hI\g5&VE;j,J\?hfNM=#`+([t"<H&.[CI\<i=T<a_,GCZ*!O]6C+d;SM1<*)=:G3$C$)'i
%HsOqC`]?MNAj!qsVN:+rW9@,e-Ce\#S"_5J9_m-rgLAO-:,4!`q*0/ABR;imB]St_5Cs^6[?tn@_jC5:Q@T9:B8sd.KD<onfg1<\
%<S6!A&?N#\id3HSK6`BHSkg#[01>*3,SQ5uKr8W!Y4/>b1WH;gM<Vg?:eR.4#VXmliYH-.MC5>L,2PHkl_eDYYTH^!Mo%@N8YR)0
%RgRFL%GEd*"R8HI#"ODGS[N=,!Os6$>DZfbSRS?4.2JJ^FXbKfm0GS1lNIGU%(Ilf:%ee]Y\XlDO$TC!a[V[fI'V1?FB&jqIut=,
%b6+6PTu")>E6PM_iUuR<%mr]E$<H@h-eTn"N+J%=[Y_BM@,]eAhL^$7PAe5kekL:d2?OIrR0u=u1&04q3NOe@1bbf1^k"fV;bKl`
%Mf4R=3uJ6mioSg+NFH=m"]^_[pf"&8`%*o4p!sU:L#S$2'Sqa8p;B$#BLu@D*FK^k6":rE;KSKmdh2(/L;UtM_b\cZ-8"(.k%a=$
%,EdhKAXPZ%Jh>g1q0=#^GN;Z_YfrD6/5bc5HN=V-$'t&C32lE\@UTugb]gEKL!IQhMn&=4]HuFe_*i*e\O'Xu`_mR#,l$Ra0Klp_
%9>L4tim&@MhY?5%i++o-*^3F/?guWB5@Uq%6Ue:6<_p1e^!jo?D)d_hL6FZbZ2Q%<SeCJFi_^6os0JX<8OCcm0]2$o&"i+o?;W??
%1EZG&2)#RDB_pH50Mrk-`V<#nPSL?e[!IYk"q0/fm;:%U:9]=1[<6LR-<3n<r&IlUbU2:HosriuW$q&8m`n^7DKc_SkG`3LEVLh%
%Dsh9LoI936ejkZ2iJoSKHN?+1_$e7XK'20MWWj&n?4["sg;3+i.hV&Fr#oS:K6pbQk@;OrJ6`]apQo,,6i=#LcFML;L2h@'TEmO?
%]#)1VGAIqOV8Q>2=s"N-1!tpD<=W=*,Ouu5:"BqjB4.&7']SLZ96h)?8B-pr!$dX1gRat$(]4j2BSTD6Go?>m(J"-2Ma;i.9<#[%
%9>=:aA;D5+5re-U7ZMD\W(A8+I)U21]NNEoc]'0k$6L\0Q)/$bMO18a<+<osqqu/HHK.I:`IA8ralJ;6fj&PT?#L:l=?B2[?mX_B
%>m8g9X9lj.9m+jX%gbEnD9%I2*;c@1:A@)SHo2/0>?e\-4;W/4Ki!ZT=[=ABhDf-DiDe.t22AsiEdV*MiB14T;>do4T!2!.#RB.F
%kNN].pb<uJp6^:mJ1EPld9*]^-W3m!5uBl?gK[K^VrAc&'+@$9Lj`ZkLY;C2Tar9\NMU1T_isaBlIR&o0WknL'*/om9#>Eu=>U5P
%B8LEEa;`Ij;R(4ortC;^#cbNbiSo7k25q(Q8keC]poY*;!8Jo!+lJcqXe3hTMZifQYtPZ2?XKkZ#l7b08tnsOkN)HIlNKY:)^=H'
%VHsMVjY@S[h3Djl(6s*#m2I>Dj1iRPAG-A2L?VU(6Uj'9pBgT7Nd_Q>/M&<6-ToS#AI_sd'G92">s]r?>U[T!?q,9[:WHH3i!_8*
%`Lt&CnS"h8n:+h3=f;Zqc@HKqVsc.,KDC`AplZM?K]*%o$4O@@7_+*Uf:"FsjN&ngNtIcFC3UHmm4BdR1H`4pdJY4U6oajN[0E-Q
%5=e1.jWSR'Jr^aJBo,-*RgZ7";nV66$pJQjI;h;<F2n_RMZ5RM<6,\7/5YKE2$YjhZbp<B^g2)D"Ns.Nbr$?%B^?Qe%(201ku<Z@
%:FmlFKqe5\<<l<cjKsL[nFWEBd#<;Y9SokWL,fN4Q?dpUZ<Z^J.-fPk8OeIFaFLGX)*^<t1W<A"29^kf)^X#7/C24!8:AgFd\G1H
%k#*s\Fli4\ob!r=J:"lIor-7KikLJLAFK^A)lD%6XuVAJ]H&=OU1g'njqQ`9LjYV02b`2s_ZQd!a.hCiiSXWT_Sd@"*P>lFNM)Lt
%_]q:3q<$<b#u45Ib.1LMR-kYfY6R1uY2#"VAUP^G#6/PBWI[5^dg"^60oCS9Pj&J^*]EOS7PV)\=]U#lFKT<drnCXV"2.l#:h2p_
%Bu3/M3!&2tNBW7"k)67#-b'W\6-72`$mNPlQeA.PL#N3ZNdBOfg(Qt`;=93l[W/$dYVq.L,GoMVIpu.2ZOX8p%;)#+XY*ndGZ@<9
%MUa,lf;aY<+cAdG/:Cdk@oXI;'cu8]VdhIVDf8@,8ij,lc%?W2_oCnL)-E#bL2`d[iPD)pdjjip'!9GNMnsn4CWbiU.g<IEX+&,<
%9t5iEb`<kE+TC+t;oUr[2$[@]gt*La0]#EIETDOr6XBmX.",tX7sPg:@$+q?`Ifh4"SebPrr];/6QtGU!4?2^jfV?F_7,#5WU3,W
%-[l$=`GO/s(#7?R,N=8[h@XudB^LNZ-\M24D,p9'8K9n2_oCntQ^2GN@sW_q<"^!2TQ0J,O;g]Q5_"]Mb3TjYCtdiJQ+0,K@*JDm
%GNOVi5)T=Tes+8h]\Z<RZ.ZNS0oWNXUdZ8Yg>_a,['u!pk6;bcV&2%^J;DKpNZ%hg=AghiN9L,^^9(aTiLgOs_)UR^>$>&iGXQ<D
%$L[5D><F4j(3($,0<!24`I<1"WNStHe'DqC)^7JJj\i6nb6snY"$Dgjo$/AX5rl%aoXDB&_G5YL^-7Js2F\@?,p3<;)*7Hlm'j6g
%%#-b:*1ec]GE"=FfZJ=F3EArZfYd%L&ft#`1SEZnf_QYcJ],Z6%Z0FKNBDA-Odi7>LbftoCG\*u)l.b3%mob'&f^u:7OP.pMe8LJ
%/%?8B[)Iq6%MNdd03#7X4Fhiu<1XD&K6)lF-M[^25G].Gn,*[U$s!H%D-':3[<70@c7q1]aFo0LJT[\d%0!VZFpn/aUm@aYV/%Ok
%iJn5"/]mS'E@m&4AZk:*q>1NCPQ]3$egYdoj2!F+)R;?A#rKVF<@-9GW+WoNS@K-"R:sAo%:68u)?.]+&Rd%`NT6pIq=g)sL@h#m
%^41N5CfNB/Pt(SRfY-(blX!p-D0,9K<U&sd=LRKHBPbn_,$_!Rj#%#-04NKn\&>>;,-bFg/+)",P7r_E[ZgBT+=RB),j*2f3$(+e
%qH@SIrQ&]BP'g76;JOloY8'hJl3e.C,Tgeu+e2sjUpct*U#HM%9TaG%I$IGu_htfpk#u1:H]*qogJBfKN@/j,haCO7fiScLJBTk3
%ip)V_:Ce,i+`&,R9p:aF3p>M#<R/*E"<3clK!QdT$B,&GZ]D>^IC\\b@=/UoCO(Y!"9l_L@S=TN.m^d.ZA$AFn8&J=@]9[DE8P2Q
%(HB2fS7cDR1tEG[U@JC_KtF5A9-DeP12VUt>7#I,1!(',D(Mdr(1Bq*qVi)$KR6kSN'%9!XbfSe&8'A2a$M$k?fY8OI68]mU2[o#
%Y!bue!^oS:kguQ?*c)7#UdU#;;%QIl&[>m)<L9ol61YiHa7?1'$XA3!-q?66#/3I"E!Kb&$1gY,]Z;S['XA_'I?#-AUtq%GIBi"B
%J7D%\i;oG[75>'H7Gand?]!I%lIQbN)QA=`5U\TC-75?9''8(p5VN?$[6e/63ee$rX0OkQH73o\=4J,eH7j$aikDcGHq3^IO>;=)
%M@]0BgU8Rel"=G)S=o)1c/fZo+s$l\!UV':]IYQ_=^9@+O.EepL,1E[%!1kWr?aP`^)&VM<'>*SXb:1jO0@FjGHn*/Aec^C8"Jt_
%i_t),#<#LRQdbPSY$"MB0&TPc_/&O@GR]+`%@XhlM,ZeLDbVug>Y?H).t4]RQccr;!H5AHFn)"*HOQ,.!?Obe^;NSFjeA_s4BXla
%XD")<!HV8'1C88Q]r$;fba2nDJ6F!$(l!<HM.O="ks`C4!)IGrJfX!2#L=-Di6>!]CWD5r?,8t`g9RfT%=[,Hal=4p<om%-bem;8
%8\@8TFI?)I$P1jR=matXLAPX^e<GYp3NA5e7\UnL@ee(a[<+u;f*f#@b]T"`,T+#Rg,oUE>s1A)l@<(i(_>0h_M[o:Jt&-)ANL5/
%(3<S[e!@nl'$?RP/C@i^_tFi"@'e6kJ]qQN7/ngWZ8n:8L8HCp)RkBRAbcgReme1u&K1fELYBg3;f,o=JBBfh7*^=?+(;!9:VM[;
%JJ!jXMo"'`Sg56"!tC/talVGgIrk*kSq(<b9Uj/c%Yb_$Ku*JeQO+*RiE1A)*adsVOhhENd:(mdaqSEX*2TEXVF-Y:=!:m"PAhK0
%O)qu:1JIBe&Rt72>KSt)3a^2d\q$@\do1WP<,]s)pqjG=@$Xj+(pUDI)-9c,)M9E)$m!&`0M%DiPijb`!l]N%%Mm@/.H&^q+,CFS
%Jadi);%?eF1N>+cie.^BX3fD[G%'ms_pF?i,QV[.l)d>js13M;(pQgiFB>$&@e"]Iirf9i&4iG"@S'S%'eu'3K^T?fc>Dc$(U):[
%]k)gI'E's#4p`J&Q='`@ip]cY;^V0sNGF5o&Mj7%,"B6=e<WRPR3a"Mhn[T*1W!2;/]Zh$^j%cb4/n3_lq$pbq[us\aK^0,U4!F\
%gOmafZu<GpD/SAC(l=f7ZIGb?/Y59%,K-#Y*L3Rh%;5m6YKgL[R20RO">6Ja-'Vc=/WF2Ur:jCS7<8JV7NWq/389!8=]E-6`UJ,7
%Kp-!!ZIUA"QJh^O]k;qE1*se$*]1jWYTI$dK-I%,>grUN2LWM"!$N[?`\Tk`o^p"N.%]cni:.k@i>Ym$=NQUb#?Y8fa#XIh:rG@!
%'Wm2=:&mI-j[oA(NI&c+I01Dt00e_@W8S!8M,GnGJ[L*6DA&rl=PG$=!%Qh=nR&:`#tc`,PG"WiKY%$&jI8leni[pbQ\2QjqGsM'
%Suik:"*7^YbYu/W*\J/]Q:E3&0EpYI[5jGrJrN4g[,a2k'uBL,>=S*A6,Pi[WR$1I/oJu2$!7]q]7rE4GuM?`N_TB/i[l35OB3AC
%nr_)3'*Hg0b+h)/%@r:k!NAKQ@-Mr3K+"0?;?rjLHr#)]QrQDIEl-fE[WXES'P3a_\;O.?8N>X*\dqGTJ3F7s5*n;E9`Rg>@ioiu
%gaW;ACX^L?dc$F(^a3"9o"ioJCn2:G]olcj`0&.PW+CPIb(Sgmjn?smHUHG)$[)fiZmP06Ys,\kMB-ut[4GW)""Qt_Np)Z&;FP&O
%;f,IlKg/@<f#3>D*%fJkA$2f1'4kVu*!Ac-*JQGJDKAW'1,akg0JB"S$*f@DH;0%S2AS7^[RH2\Lh0(50I%F0(-He\_.kbJ^J(Gk
%O&n@o?1f_j26DJ8L`D`N<"9!TIc.&Rq(5;fJlRq"pKb6U=Mcb2Y<oE&_[KN5Yc`3cM(20R6i0pETpDSas#GXY(h8bD6bp",DNC&e
%,'HdIIYs_Jb`k'P8&ruWV:$\Es.U:"m:."b1q,^p8bo`]Ljcg;."OW5WjGX)>A&_b/nKLi8TIWt+)gatnj--2?r7sXDPWl2e3Vn'
%b6qTaQm=[_(R5AfCo'B2$+:CeSS_^h!Mg\H"o*Lkd/iCP&#@kYZ`HU.E&<+rN#0Y8JFefi3>!qlG\WG2qa&G8fKA-7\tr+K-aY0R
%C;?UAQ@j>Fio!pC9_n34`@+'hk3=IP<BN4<D5Y_r!]fCF#=Q%FW2cSpj?m.)[O[PTn:D$3E;BOW]9ZL>P2j1sR/bO&faRL!hiFUn
%A2"_=$YsS`e;Og9OdYalkheJ:GiZtf1/E&eX_R--N#&u3<QE4?N/UiX6]HUCR'g"9mNYls'CY;;\0l<uR4K22MWcKGN>j9@KnT8=
%s+C<^bt_!FAm9C]OH&NU5`?Y%cDdS5m51T)0)g:gI59.5g@'!D)]/=k(ET=oSP&+^0gPoAUnVdcbM`?%OfU@6U7j[X+1gNKhF&("
%(HP>>W]"MEdpjZB&;tUGiNl7Yd$RfSOtEM$]IDPCX%R;cC9FDPQ;Y3=(0ac?k3Pb&p_hb4'N)d3*eOi%i'+`&#;L0bP:.atTBI(4
%PU:m&`u;?/Gr)Rm'l0M;?n6B>/_k)LYIXcl+R_0II]$3kaqo4N4N=CF'+I7P=CaS7q+Y6=4h&VVqRbEFH!OL^WiErW%G9IkS9BP;
%f5(CAFnZ6UDl]tH`m*ga`ip1IF5;,76#8h3&*.DHoI4Q8VP5X+`7_c((]Oc1EJS[7gocrC[,9PS(^s8ifE1U@(#U;0;31EL7]ZH7
%([SW#-asKWS$(kn@"0D*FIW!m_>\U,2QL4+eV@4pS8:)tZ/CKFO1S0is5G?>R<b@hoU%dVkuF*[S6<VujL$b1]JZfub$"BJqKs44
%HP(ZCXMA+QiUr>1gr69H96g!t1/o*_eL3EB]`MQ16H8tYa%F3*g5;5EoS"2'A+$BIF'-%j&g4$U8(gi#)t]7kgUe:lS\@K_?j*s&
%g[)D2oLt4ma;h'A#L:f6n-PjEL+[BTE*0Db!uVV#/:g`K4jT&,G;VpKQK0@Dd:ZBNffQ'D#5tI00fAT'lD'\kRYa.o1l:SM/_G4T
%Or\WYC*T8'P(ehUiKk#19F_f2lK'p1J0gQSXI;]@2@$%96D'GtZf^@XEQH+M?hY6b\6aJ$g\X;6[HU83$S7Xb4V]Q]2tcHVN(sYH
%Wp6<qm1:tF%OLWM1m]ZQE,O+r,NZ<1J](5=NfrOnG>(=L2-Z9=.*^Cq90iNnU*8"!rpP?DY9t$P7/!*+;MYBE<#TnPV0V>f$M$Uk
%Nc=&n(m0Cp*je6'P+7XQM`Ic<fu"19.*ZuBcA'4(])s*[kOH.d*(LFk[""Dc?MKQ>'iD&0i3S8U%bnRHPN7oqc;!_7[r&bQZ!g&L
%i?H@sEhf&MA.4d5gFi-!&0Y$pU3<RWd4A>E]DM-EH_0HS:!j0NDKEGBNM`N(4o24CA#R4$gqPGDAj4if:B]RI@PDUE$H\_ZTFo$_
%W>MYVpp^OKcnmAT_PW8;`JnQ"GV`Os]g.'m9YTG#PLBqOk&H]N`>I)8'FR@M8MYnmdPmUQ:$jnDWoEu;`'C'-.QfaUAMR/>>'-l,
%fTBS3MCY;S81,]pIJ5hmN`ZDW*HC8G^&]EI6a!31'Rn-BiH9'/_P@K]SnZ:l7-n&U9ZCa`BlK=cPfdm-_Cku"V@*q"R!C^M3J.ie
%SkH1eh:*`BY/a1kdWY/HEG;!*<u?VVOrs+.<&rRs^@3#_/l1Jp'P*Ke=;<-@^N:sZOl%PFb%<#4lanjQ?EOp"h,1QcSp%0'1)3t<
%'HOD`"cl"Y>?9X03]Gk>^nB+9mjF6c.L#n$V)[=$]9K>0KUHDB\2gQ%(k)r=#-[k@_gg@%cZ%j;g'];1j@C/;T18]e\!T*>g=M3>
%1dMI2.!^#<U#N+M>.'hPUhppTfbe95G6<5:.0oc`n2GAj+/!&#nkd`"Fsm1"6'i&,:?X;!5FGhBp/G'InXJCU_[i>+,?eY$LXH=J
%:cHJ5hF0>4JA4E7(?5:m3G&_?4dp(&,@=Fc+?IB]>0Wshg?"8ehTUr_^mM-!W&E?:bn3F;^^bE5eDNb'UCu-s%TF".P.U&j1*(E5
%./\.SX1;HpBMFJ5>+bEr::bQmNOn=CkL>H8p@+?TG&@\*]1Nhf<H]Pf1*MU7'@E8oC?B-!iL"I(VDC47O'%/.hL0P)O52:Pk5ETb
%(eF^[_fgI6;/@r>cJV3VE,@'Wm@pLZ-iH?0lDdi[0K=>q-[66'eudm*<#r0%&`T(G]USBj*p!UIG:+U@_7[;)lT=mSro_]E*jL%-
%G:B"aUg+FSFY?WN34^4,I^]PER+G3q%,XJ(F"QWZ870,28CQnF/F-*I)j^6_I*J\^H:q7uE)c9&15X'mc`C.:PJ+%ho3Q?Mh@m=>
%csX_"pJ7-5rRn(5CCU9r1qJ.(B`o;OB77CeeC*c2p,2Dqir$XA*,C0r0U4-;N1ip><)Vu`(S9P6a,d"[6F'at?#T#9'5.9ns'4j6
%pW?kOoD!XL4?gH#".GAFf%0T%M=l1#^6$Oie#RS>o1m:";X?W3>jH$sSL8^/@hG:W;W[U.W-o)W)[ZmS[t(6*_0:'#0Qkn<Y-Xt!
%6/krO)ZN(!C!AFrT]9INn-ngVZND+OjmfYZI![>0ePFPd]o[T*!QAoeW*[=OCanF+_r1[n4JFjQ%1;V&KE`HWC\Il,=81Xe`Y$>*
%o#nLl,skdBP+G$3k--=nRPPekq1-:1p/AFpr(<S(e.J`+0q`4f;;5H\d(a@!PRI'VPq:&A6YiRp#>+VlJju/*j+d?lIfBJq'=gU)
%"*GDeI03Gr[=+=:E/lhJYq9QJas%\=QO^/nMiLH]&GCk@$pNTp[YaZ,:M$EEolp]rbfKR.2u0IV/2,N;`^7V/DH<:SFa4DAoj/b1
%;?&7;(XD71Cj[tbCEk]Pb,/#EmgSd;RCYt"7?_,egCC\]/nru#poQaWFABD;G`a=c.=sBVCV/8f-jsn$9mVB^Tk`1AS,ArGo_1o!
%%dG$'oI(6eQEfKocqom3a<Vu]<m,aje:%!?&ZUY%SaL7!9FDS4ZajPqP:gMc,RS%GFp!,9.g^]qDsQDpDh*_+;6V8!Y35\p8Jf@P
%PBmW7:SuaQGU5CaLnr-WUH)@^9_E]HrJQdH>nht2_$Wq/1Os=B)\>Tg=_ZaRBURgsCK?u][8a(t\/k(7_)unO2r;msa9^3tl>:NC
%k$UlBRp$p,3@fNoQ,NH<f5lHH49tYu>!'1sqmJ3YkJcP>#R9`Z4X.!rUL2Uo+rT>Nh#1AI&*4"C`&!qZm^pUc]1&mIq`Xs:'%kU?
%n6r'DBX42F-^/LX.F)2uTY#X0.oE$\.EYa9F?=AjUJ/L@;:_R1?J?^C.`$(6\K)_`?7WYV:3]Tb'[$@0*IM2nF6WP*=/&ij>]0n4
%%?0jF>8CZS_bc(-_1fCFniOW<U9@oRU+mb1*i6mdpkIs;3aW8#Go[(I;-.YnOU24C4/Q.ri[;?@ZeiBe1\)!p+7Pr'/^>h_d-K#d
%<UYb'+,lu\QPr@gSu+X9gE!Pb[b%i=dbPF&$e9F6WS1*Pp/<&TWB/oeM_,@ulhNu\EUa5qi'$+4ph#%@Rp("=3%!%#4hXHHDVeQ[
%0BN2fH6sP6B0(-&jU/-RW+aT@jua7k[g&X`5I`pqF_Gqh>_K@G7L"->O"_'35:LH%6V=c9PnWWq`MsAQWUu8-+9^=RG6sIMK9VW:
%C/$$_[!?'f"DOE0-[^toMk]NtV0NeA^bP(u8'FYh:@Y<$m0dUYWhInZF/fm6ZInKf6a[bPOdf/;%@bGQ^Ae(kP=)d,'i#iH%Q#`j
%\ec_qOrdK+dSTE!LrQ2TMea>;9Lhsn/-dD;hrn45\%DY'&;geFIJ2F9Ib)7uUou@@?49JEPa#aYXMjI:a.>$*YXG#j8RR!@`N3R?
%I8(HQI*e_(7&(tLRsuGTm07fV_4Ae1.Hn:,q;a5T6"^<T4@E=Hcm]aGisYb]#`>S>\6AjuUIJOuO!0"ZUK2:gHQW#JE__J!O2J1e
%F;=OT:^W9"-?^T[!hoW;7l)1%p!s]h%)+"iV^.5CN<>]'kn&V=a)L#>#:=.HK')diiIm6sJ!6TQAGZNEm;aWZF9;S1]IB@t@*u:o
%I[/sU2-VF?XgoH8Wip$g)^I*gDDE+>H.<T0_)<h5-:@a4\a=0HK3M$_d#p2ImV`F:einDmq+MYE?COT];VKJ>6`p"GY$B:SItJ*"
%`$3#0X@`*9?$mb0^6u?U^mtl^)Cn4?MS\4+G*1^G[o&XX&BeZkG^c*5r!U=Mi8B;f&`R1Xofk0Q[k$-[!hR1'=HX3ghBOukD3B,R
%"bqq:l%lj%kGFpuB,YaX\Re7(N]!g_/@q/oflkVC[05!K<I!rcAe.[c>V@!D'Q2IKn@P&ns/o#mHaJ\:?![qY$scPbFZ-afg[C4#
%]kCaR#7JqP]T=*/QaW[+N95EN:"ISpSX/&rX4-XLQKuf'TBu602BuJ\CJD21(lj_rdH8fITQ.&e`1U\kG,/!@JP&0P()@r#Sl,O^
%\!-]an6ido7n(+BF;lm_1GC:@7Fb_&n(tc-%Nk9sI^t9C0m`8Zf#1+U<bpC)D4oPjHAG`$\+jqW10XT$Nr2pm+tHWT_+k!RS6"LC
%6Q?%JAsFgn'!2;Z;(2!^+$(-FDAD#V`3:ncnM#Cbd6r8ABK`T8<JV3,$j(@5X6hGL"4-@JE+Au!3(J/=)@^HHZmdXl3Mm\J^3B[R
%c'4;&6<RmD>+e*EAe1!1$O5Pr1mR5dL`X[dn:olN>`GRFQ,Yg,RSQ8naH\l6rLsrT=G-bJ>/hn#7'AJ/9O!gdf(8Cs="@H2K'hgM
%'I'rA#`TkU0ZN+9[Z0sTcZ?,)#>Rp*pfdO%aqEMs^JSceVjd=SWlPn.Lf6]^,/;^L6,`:9[u.'GdPKtMQ2B1]N*VUs\ut5R5IXLO
%E_giI%1[kdD%m*UQq.DJLq6/6IJ"''b\-Z`\bK)9^bX2A/a8`$$%M?E\AN^+59^Xh_VIe90M2*hm,6+u\'k&N`$PHcB4W7&+mNGY
%q!s0gZ$10ZnhZeO#QHYtr0((EDQW%[mGMYuCWd'uaYF\&Yab_XDbH'HK21#4+D_#%g$k5Zbq8CO>oNH^$A5'MKF7maO?YBTJOOf`
%AODG8Ber'0(6LU%9qV1L2,2@eGY7OP3O<`!#R>`6-mGb461:J)&SoXmJ\&6h[T)W->QjSOB.%XO-ee"Dlrbt?YlaZ(33_;].K9:k
%&3gVag4VeWG"5As1nTK\V$I"Rn#=hf]+6N0oEsF!"cUh5Ot0LV!3DG!1cdXj\7VoII\!N)mq6UO(E3uSrMg1X0!Aq8N&He2%'7E]
%\@J_qVK$Qc/8\G[][tnco<r0,pDdI,02skN*Ar:io?j8jW=1.=3?t&Jk6ulqgo/7V*X,`J\aid^iXL\<)oZN;-!N+L>7oF']'P#0
%"2SLgX;E)HX[m4Lc$&>,oo<d+1nmrpMBPJZ4>'>&&q7*iSVdbcBu%M\\TBf!a_:kj-b8&h>9o3U/f+IIgZeZ)p_P;s]m0[HWn!jf
%):u%/eP0h'btDV3n,sX,MDL(>D^RZ>r#6%7Il6!;+G+%1`<6<l3^VkL8T?.8:?hE[pB67_EF#a1X$7s5A:7DlR']B$a_gs*''$G8
%*Wf3?5u^n]F:gVrLAU*EW&KNXBu+rfVd2Ckm_)f)+_k,kiMi-t>;nQGWbTPmGJBQ8p])'4X(>-5#f5)C"Vm']D:oUfc"CIYk5'E;
%->7_JIW&Btj:diuBYHl#;8AsU\ATF0K'%8:Gj*ApE$jrFeK,tm3q6S\;__"7f8*0fh3aW)H?iJCIpU:jf#!cc4JU"(a#]_RdMsf?
%0ok:a/5pM[ju#P=e:9fWPm]q1O2!#-YJm&0348X#@#)QD&u7CifbML7]G/$tM_@7VY'<H=hnVr7<QH/['Z/=BU'-g:T"N;VZS%(>
%l?,R"1!"5])JG@!p:t,h7BZA$AF\2?'BMO.oY:K/Tn2;+AiN]4P`ac[-R'6X^X#J3"pG)8/XM;O0Mk1tWHi]UVfuRH<0ATd@/Zt3
%Jr1'Zl#7ichcaE;_')K07.%\Ai-hga_+b?T$e9B[8hYpoZ<`:OrGsqC&^nBC28Mh8++BSVl`\n2n-aJj@/ioAO1^3BO"qaW2_4AG
%5"iQqgr=t),fPsU74E@gl#E\kb=9a0Vb-#:)tdY:X#9`h6i2dq?-a=+DOOteOZk9rUPIa>B3:79pt>sap!G^3.A,Flp$,=Ecn(L,
%hJ@7;S^WgrYJ(fK%II@n'TO)YYuYH+*hFW8hV^6i7\?cpkq\LCn]YD)7j2Ss.(1.fUd,l<*>rjIHdcI*)g^:'IG5iFZ\-T9]%e=Z
%#L^PaFH@dFg2E3+?4Yfp%8A(4gZL]:cY.>c_D@(qbF'rg7sNjE>*GtbZq(X'`KQ9rbo4i$_ec=.-b)_,NoqO)0.6VaL@)<PraR8B
%H\q,CF8B6$,_X>U'5%c-LbbFG9Bf/]T#W?ek]Mgd]HHO"_1[P)(^,d`f#Dp`#*L'spMa*!E"HK6AcRm!*RVqX0.3g8N.%;]ELZ"E
%8AB6*bp:S.ca#+VgICd^&j*pl.Ved!9(>Sobf\KDUCe"G!HWZ2rOY/dYg+8\H2X)7h37R"EmgtEcLijJJ!UX^TK`8[HkG(tjJnX'
%DA<u-(sJsF5n,+Fd!TB4_P529\9UH^^/0%g8=X"D!P,m8-BaB@pK!+T$#I1I<6+KfVm1Df48)dHDL^u11n^`i.t35rB5\+Y"62Al
%qCO4\4GJ73O<G8s1>j,I#\&aP2"<O_o$b;%=[V6E0,hXNM$+[M(<+VDY$#<Q=o4=n&*G?tM1?P5;2.=.=UjjG0;.qs-=MQJILPpi
%$b1TYai&"2C6H_[8O&q*E)VT/9iEspc3(C]</BZ;gj/$@LE!*hAMJ/3$LKNr;g,f^VhqJflW\f1l"kM:Q!H-V1KHbV-f/aIF>Z!*
%2_IXe76/?s#'l'O'V":[Its2r&3IdPr#!PXEsUBVqqc8U9XLj>ROuCEBY,9Cc4$Q5/[ZPFS.'We347DM*:_&c'p'eUp$Pt(6+(JE
%n3#0\;M;D%/>X*NCO^l@Te)*]UZ8g>N:JM\[r0-Faa%b.Dhn#"3HM$<[C6jr2)sf/A?gEOK8;(pXA`7u-n0)H1k%BMY.GE5/@OEc
%J$&%/92+*q+c=n+*'Lj_NBNfjo&-5UrjJmEneS'jH6u]8jH?%e]k-O:hr1>i1A(=WUhH[NoEY:U19Q]&^%8$e4JRdZN_,AHFc,i3
%=]+tU#_t"[ml_ES.QmDrJKt0Mn)s.'SXB/0b8&^[=7`"V$lTXW;q*nNGhe,GHXGRjblkq(N^2:4kqhC-*nS$;ihp%<(51HhDF_]u
%qP8t(ppH:n^*DXLiQ8's*)ZqjcZo2D,<=nR'.4/'D*CeuAKbGbr:Ug-CG0a\#(ip6aEVBR_F.uVfTjn"O_jETfFnDCQd&k%(;@\V
%n'Z^#[+Sm`40dJdLeKZg16JXjLSff$E/u03Tc[$pWcBA,4+A4W,]Fc03_KA5]CqA!VqU&slCTQV0CX?tCSukT1Di/cf&W7<Ic_hL
%B6t&m"C5aaKJ9\n-CaikbE<IOQXO=d`7Vm,6f@?E7+KuXlYG9a3NRUdXo//0Do!.3cmAe[&\*fU2L#b9?A]/s61Dc@]^8qi=@?!I
%[Z']TOU05YV&m2!3]UmbG8^P8UTou$H2-Y/Sej'#IY[DuD1*T7g-]P#>pOV1DLpp89<9$DCg4!'+$#DO^@h>3Ou=7A+k7HEc];O\
%FPg\`1Q>@UdXE(QCrpIN:<Y,h6*/&hq^g_-Np2G7oD41h+pQX<O!R3Kl3rI0cgkV-B7THb$TuFhlTBW?J8_/,@e:*gA&OU&UpK8Q
%8tVi,5PdPt-(kqN!`!TVb(s\^j+TKEnA,%'gHPIXGOT%34$<-205i7&)k5Q$2$pf5Sm/D(luo7Pls9M:KPfak42kre/K+c762q.u
%;:X0PT1!(SiUYg&)iSu&1Y))e$B\.ZZnO43EGE">anmY#M^4>E@"h)PJi_<h*XW-2+BPu7BuKHik!7.0rU,l+fbA'4Tn_H7g00t&
%FZj\B+r:T4'EId@ImU]WPs)b-i@)HP6Nj6_.V;0B))%.jL<F5%c;tPGlP:JYS;#*kIUDfn;Gf(b&*3RsPF^&)cf::;`-=ClC'1dS
%\\jVpTA^aD^@s]M;=#cKAiRO6i2Beh@*?@I/WDU'kb,m=*X9Mld[&?,G/pEh'>0sd]B@<?dBl&]OP8YaXi7b-cO(2:a)A9jO$Y(7
%X1=V$oXj#N4#@Ml1OM9cGKuQ`NI)BB,tTuT?5*2P=4EgU*4X7UMqj6ok(YdmgL5l.4%qY;kkTEA\60B$M29CDTN87b)ghA*4E8^g
%<QKt9N)'#*In.N?+h`)[9^'j'-@>>QoQnF6l6\U/01U9Y!f@K(MWjfdh[tap51h+Zh='Oq5+S&OOHp9[WMc$i(XPTCflEVgI1AjR
%hl27nVPo'?k'#n5:k*aon+VR/0dZZu<'O<dE/0r.'cSAi$c5%Ah[N@F1,]M=%s`,'2Oj!Mb=38KkAjjhbZOP,S!iY"=5X.?:4d45
%FmHd/B%,gRjuUrh-(\3M/_Al)ID9k[4q/ZXKt$OIS@4!@.8&/jV@q6I0(7ZL#.`WO3GTSQF+&!SpWq@SkM>!c"a"A@SD'0>-Ms3d
%31oXob#3lDot%/u,mLf5>G(13D"d@h/0d8IGX0KteB\E&ZYR(QF,ss?s5gMJ>'d@Er)Dful>CrP)rRm2!]fl-!l3:9[[+M\Hd9@Z
%_%TpT";T?hh$P-R.k<I+gjJYF!Br1:Ed+U.[J9u';X":8&52Do'@CST3ai(on2#IEI=OH%2i2ZHgXEK2T&#B&m@V-=DtfWXHhlh/
%pnrV$s7+-:rc7i!+.n#\posjKppZlErq,Zorq)h4qt04Khu3K-:]L%N_b\&F!q#LA^Y8_\iTFQ4rV#,us7Oirhu<KHrriQ*W;hJl
%Ie_rqroO%GrXU>f;cW~>
%AI9_PrivateDataEnd
